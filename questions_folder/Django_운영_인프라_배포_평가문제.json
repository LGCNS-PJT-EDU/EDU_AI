[
  {
    "question": "Django ORM에서 `filter()` 메서드는 무엇을 수행하는가?",
    "option1": "데이터베이스에서 데이터를 삽입한다.",
    "option2": "조건에 맞는 객체들을 조회한다.",
    "option3": "모델의 데이터를 업데이트한다.",
    "option4": "객체를 삭제한다.",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Django에서 인증된 사용자를 얻기 위해 사용하는 함수는 무엇인가?",
    "option1": "request.user",
    "option2": "get_authenticated_user()",
    "option3": "current_user()",
    "option4": "get_user()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django REST Framework에서 API 응답을 처리하는 클래스는 무엇인가?",
    "option1": "APIView",
    "option2": "Response",
    "option3": "HttpResponse",
    "option4": "ApiResponse",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  },
  {
    "question": "Django에서 API 문서를 Swagger 기반으로 자동 생성하는 라이브러리는 무엇인가?",
    "option1": "drf-yasg",
    "option2": "django-rest-swagger",
    "option3": "drf-spectacular",
    "option4": "swagger-django",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "drf-yasg, drf-spectacular",
    "chapterNum": 4
  },
  {
    "question": "Django REST Framework의 serializer에서 `validate()` 메서드의 역할은 무엇인가?",
    "option1": "필드의 데이터를 필터링하여 반환한다.",
    "option2": "입력된 데이터를 유효성 검사한다.",
    "option3": "데이터베이스 모델을 업데이트한다.",
    "option4": "요청 데이터를 암호화한다.",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "DRF Serializer Validation",
    "chapterNum": 5
  },
  {
    "question": "Django에서 Redis를 캐시 백엔드로 사용하려면 어떤 설정을 해야 하는가?",
    "option1": "CACHE_BACKEND = 'redis'",
    "option2": "CACHES = {'default': {'BACKEND': 'django_redis.cache.RedisCache'}}",
    "option3": "CACHE_ENGINE = 'redis'",
    "option4": "CACHE_TYPE = 'redis'",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Celery를 사용하여 주기적인 작업을 설정하기 위한 Django의 추가 라이브러리는 무엇인가?",
    "option1": "django-celery-beat",
    "option2": "django-celery-periodic",
    "option3": "celery-tasks",
    "option4": "django-tasks",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django에서 로깅을 처리하기 위해 사용할 수 있는 외부 서비스는 무엇인가?",
    "option1": "Sentry",
    "option2": "New Relic",
    "option3": "Loggly",
    "option4": "All of the above",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django 테스트에서 `pytest-django`를 사용하여 데이터베이스의 상태를 유지하려면 어떤 설정을 해야 하는가?",
    "option1": "pytest.mark.django_db",
    "option2": "pytest.db_setup()",
    "option3": "pytest.enable_django_db()",
    "option4": "pytest.db()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "drf-yasg, drf-spectacular",
    "chapterNum": 4
  },
  {
    "question": "Django에서 Gunicorn과 Nginx를 사용하여 애플리케이션을 배포할 때 필요한 설정 파일은 무엇인가?",
    "option1": "nginx.conf",
    "option2": "settings.py",
    "option3": "docker-compose.yml",
    "option4": "wsgi.py",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  },
  {
    "question": "Django ORM에서 `all()` 메서드는 무엇을 수행하는가?",
    "option1": "모든 객체를 삭제한다.",
    "option2": "모든 객체를 조회한다.",
    "option3": "객체를 업데이트한다.",
    "option4": "특정 객체를 조회한다.",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Django ORM에서 `get()` 메서드를 사용할 때 발생할 수 있는 예외는 무엇인가?",
    "option1": "MultipleObjectsReturned",
    "option2": "ObjectDoesNotExist",
    "option3": "FieldDoesNotExist",
    "option4": "All of the above",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Django에서 유저를 로그인 시킬 때 사용하는 메서드는 무엇인가?",
    "option1": "login(request, user)",
    "option2": "authenticate(request, user)",
    "option3": "user.login()",
    "option4": "authenticate_user(request)",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django의 기본 인증 시스템에서 사용자에게 JWT를 발급하려면 어떤 라이브러리를 사용해야 하는가?",
    "option1": "django-jwt",
    "option2": "simplejwt",
    "option3": "djangorestframework-jwt",
    "option4": "django-auth-token",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "DRF에서 요청된 데이터를 처리하는 함수 기반 뷰는 무엇인가?",
    "option1": "@api_view",
    "option2": "@action",
    "option3": "@router",
    "option4": "@viewset",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  },
  {
    "question": "DRF에서 `ModelSerializer`는 무엇을 위해 사용되는가?",
    "option1": "모델 인스턴스를 JSON으로 직렬화",
    "option2": "모델을 바탕으로 데이터를 유효성 검사",
    "option3": "모델을 업데이트",
    "option4": "모델을 삭제",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  },
  {
    "question": "`drf-yasg`에서 API 문서에 자동으로 설명을 추가하려면 어떤 데코레이터를 사용해야 하는가?",
    "option1": "@swagger_auto_schema",
    "option2": "@api_view",
    "option3": "@doc",
    "option4": "@auto_docs",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "drf-yasg, drf-spectacular",
    "chapterNum": 4
  },
  {
    "question": "`drf-spectacular`에서 API 스키마를 자동으로 생성하는 설정을 활성화하려면 `settings.py`에서 어떤 설정을 해야 하는가?",
    "option1": "SPECTACULAR_SETTINGS = {...}",
    "option2": "SWAGGER_SETTINGS = {...}",
    "option3": "DRF_SETTINGS = {...}",
    "option4": "API_SETTINGS = {...}",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "drf-yasg, drf-spectacular",
    "chapterNum": 4
  },
  {
    "question": "DRF `Serializer`에서 `validators`를 사용하여 유효성 검사를 정의하려면 어떤 형식으로 사용해야 하는가?",
    "option1": "validators = [SomeValidator()]",
    "option2": "validate_field = SomeValidator()",
    "option3": "custom_validation = SomeValidator()",
    "option4": "field_validation = SomeValidator()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "DRF Serializer Validation",
    "chapterNum": 5
  },
  {
    "question": "DRF에서 `CharField`의 길이를 제한하는 유효성 검사 옵션은 무엇인가?",
    "option1": "max_length",
    "option2": "length",
    "option3": "char_limit",
    "option4": "max_size",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "DRF Serializer Validation",
    "chapterNum": 5
  },
  {
    "question": "Django ORM에서 `exclude()` 메서드는 무엇을 수행하는가?",
    "option1": "조건에 맞는 객체를 조회한다.",
    "option2": "조건에 맞지 않는 객체를 조회한다.",
    "option3": "모든 객체를 업데이트한다.",
    "option4": "모든 객체를 삭제한다.",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Django에서 사용자가 인증을 요구하는 페이지로 접근할 때, 로그인 페이지로 리디렉션하려면 어떤 설정을 사용해야 하는가?",
    "option1": "LOGIN_URL = '/login/'",
    "option2": "REDIRECT_URL = '/login/'",
    "option3": "LOGIN_REDIRECT_URL = '/home/'",
    "option4": "AUTHENTICATED_URL = '/login/'",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django REST Framework에서 API에서 데이터를 반환할 때 사용하는 기본 클래스는 무엇인가?",
    "option1": "APIView",
    "option2": "Response",
    "option3": "JsonResponse",
    "option4": "HttpResponse",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  },
  {
    "question": "Django에서 API 문서화를 위한 `drf-spectacular` 라이브러리에서, 어떤 설정을 통해 JSON 스키마를 생성할 수 있는가?",
    "option1": "SPECTACULAR_SETTINGS = {...}",
    "option2": "API_SETTINGS = {...}",
    "option3": "DRF_SCHEMA_SETTINGS = {...}",
    "option4": "SWAGGER_SETTINGS = {...}",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "drf-yasg, drf-spectacular",
    "chapterNum": 4
  },
  {
    "question": "Django REST Framework의 `serializers.ModelSerializer`를 사용할 때, `Meta` 클래스의 `model` 속성은 무엇을 지정하는가?",
    "option1": "사용할 데이터베이스 테이블",
    "option2": "직렬화할 모델 클래스",
    "option3": "유효성 검사를 수행할 필드",
    "option4": "응답 데이터를 포맷할 방식",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "DRF Serializer Validation",
    "chapterNum": 5
  },
  {
    "question": "Django에서 JWT 토큰을 생성하는 라이브러리 중 하나인 `SimpleJWT`에서 토큰의 만료 시간을 설정하는 방법은 무엇인가?",
    "option1": "ACCESS_TOKEN_LIFETIME",
    "option2": "TOKEN_LIFETIME",
    "option3": "JWT_EXPIRATION_TIME",
    "option4": "ACCESS_TOKEN_EXPIRE",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django ORM에서 `annotate()` 메서드를 사용하는 목적은 무엇인가?",
    "option1": "모델 객체를 업데이트하는데 사용된다.",
    "option2": "쿼리셋에 집계된 값을 추가하는데 사용된다.",
    "option3": "데이터베이스 테이블을 생성하는데 사용된다.",
    "option4": "필드 값을 필터링하는데 사용된다.",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Django에서 사용자 인증 후 JWT를 발급하려면 어떤 라이브러리를 사용하는가?",
    "option1": "django-rest-framework-jwt",
    "option2": "django-jwt-auth",
    "option3": "simplejwt",
    "option4": "django-auth-jwt",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django REST Framework에서 `APIView` 클래스에서 HTTP 메서드에 맞는 함수를 작성하려면 어떤 메서드를 사용해야 하는가?",
    "option1": "get()",
    "option2": "post()",
    "option3": "delete()",
    "option4": "모두 해당",
    "answerIndex": 4,
    "difficulty": "하",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  },
  {
    "question": "Django REST Framework에서 `serializers.ValidationError`는 언제 발생하는가?",
    "option1": "데이터가 유효하지 않을 때 발생한다.",
    "option2": "모델 객체를 저장할 때 발생한다.",
    "option3": "HTTP 요청에서 잘못된 파라미터를 받았을 때 발생한다.",
    "option4": "유효성 검사 후 잘못된 데이터가 있으면 발생한다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "DRF Serializer Validation",
    "chapterNum": 5
  },
  {
    "question": "Django ORM에서 `get()` 메서드를 사용할 때 발생할 수 있는 예외는 무엇인가?",
    "option1": "ValueError",
    "option2": "ObjectDoesNotExist",
    "option3": "IntegrityError",
    "option4": "DoesNotExist",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Django에서 JWT를 사용하여 인증된 사용자의 ID를 추출하려면 어떤 방법을 사용해야 하는가?",
    "option1": "request.user.id",
    "option2": "request.jwt_claims['user_id']",
    "option3": "request.token.user_id",
    "option4": "request.data['user_id']",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django REST Framework에서 `APIView` 클래스에서 `permission_classes` 속성은 무엇을 설정하는가?",
    "option1": "HTTP 메서드를 설정한다.",
    "option2": "응답 포맷을 설정한다.",
    "option3": "API에 대한 접근 권한을 설정한다.",
    "option4": "데이터를 직렬화하는 방법을 설정한다.",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  },
  {
    "question": "Django에서 `drf-spectacular`를 사용하여 Swagger 문서를 생성할 때, 어떤 명령어로 스키마 파일을 생성할 수 있는가?",
    "option1": "python manage.py drf_spectacular",
    "option2": "python manage.py generate_swagger",
    "option3": "python manage.py spectacular",
    "option4": "python manage.py schema_generate",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "drf-yasg, drf-spectacular",
    "chapterNum": 4
  },
  {
    "question": "Django REST Framework에서 `serializers.Serializer` 클래스의 `validated_data`는 무엇을 의미하는가?",
    "option1": "유효성 검사된 데이터",
    "option2": "데이터베이스에 저장된 데이터",
    "option3": "응답으로 반환될 데이터",
    "option4": "직렬화된 원본 데이터",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "DRF Serializer Validation",
    "chapterNum": 5
  },
  {
    "question": "Django에서 Redis 캐시를 설정할 때 `CACHES` 설정에서 `OPTIONS` 항목을 사용하는 이유는 무엇인가?",
    "option1": "캐시 데이터를 암호화하기 위해",
    "option2": "Redis 서버의 연결 설정을 지정하기 위해",
    "option3": "캐시 데이터의 만료 시간을 설정하기 위해",
    "option4": "캐시에서 데이터를 압축하기 위해",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Celery에서 비동기 작업을 설정할 때 사용하는 메시지 브로커로 가장 많이 사용되는 것은 무엇인가?",
    "option1": "RabbitMQ",
    "option2": "Kafka",
    "option3": "Redis",
    "option4": "ActiveMQ",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django에서 로깅을 설정할 때, `LOGGING` 설정에서 `handlers` 항목을 사용하는 이유는 무엇인가?",
    "option1": "로그 메시지를 출력할 위치를 설정하기 위해",
    "option2": "로그 파일의 형식을 설정하기 위해",
    "option3": "로그 레벨을 설정하기 위해",
    "option4": "로그를 비동기적으로 처리하기 위해",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django에서 `pytest-django`를 사용하여 데이터베이스를 초기화하려면 어떤 설정을 추가해야 하는가?",
    "option1": "pytest.mark.django_db_setup",
    "option2": "pytest.mark.django_db",
    "option3": "pytest.enable_db()",
    "option4": "pytest.setup_db()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "drf-yasg, drf-spectacular",
    "chapterNum": 4
  },
  {
    "question": "Django에서 Gunicorn을 사용하여 애플리케이션을 실행할 때, 기본적으로 몇 개의 워커 프로세스가 실행되는가?",
    "option1": "1",
    "option2": "2",
    "option3": "4",
    "option4": "자동 설정(가용 CPU 수에 따라 다름)",
    "answerIndex": 4,
    "difficulty": "하",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  },
  {
    "question": "Django에서 `filter()` 메서드와 `exclude()` 메서드의 차이는 무엇인가?",
    "option1": "filter()는 조건에 맞는 결과를 반환하고, exclude()는 조건에 맞지 않는 결과를 반환한다.",
    "option2": "filter()는 모든 데이터를 반환하고, exclude()는 특정 필드를 제외한다.",
    "option3": "filter()는 쿼리셋을 반환하고, exclude()는 리스트를 반환한다.",
    "option4": "filter()와 exclude()는 동일한 역할을 한다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Django에서 `SimpleJWT` 라이브러리를 사용하여 JWT 토큰을 생성할 때, 필요한 설정은 무엇인가?",
    "option1": "AUTHENTICATION_CLASSES와 JWT_AUTH 설정을 추가한다.",
    "option2": "JWT_SECRET_KEY와 JWT_ALGORITHM을 설정한다.",
    "option3": "JWT_HEADER_NAME과 JWT_EXPIRATION_TIME을 설정한다.",
    "option4": "JWT만으로 인증을 할 수 있다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django REST Framework에서 `Serializer` 클래스의 `create()` 메서드는 무엇을 수행하는가?",
    "option1": "직렬화된 데이터를 유효성 검사한다.",
    "option2": "새로운 인스턴스를 생성하고 데이터베이스에 저장한다.",
    "option3": "응답 데이터를 직렬화한다.",
    "option4": "요청 데이터를 암호화하여 저장한다.",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  },
  {
    "question": "Django에서 `drf-spectacular` 라이브러리의 `SpectacularAPIView` 클래스는 무엇을 제공하는가?",
    "option1": "API 문서를 HTML로 변환한다.",
    "option2": "Swagger UI를 제공하고 API 문서를 자동으로 생성한다.",
    "option3": "API 인증을 처리한다.",
    "option4": "API 테스트를 자동으로 실행한다.",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "drf-yasg, drf-spectacular",
    "chapterNum": 4
  },
  {
    "question": "Django REST Framework에서 `serializer.is_valid()` 메서드는 무엇을 확인하는가?",
    "option1": "직렬화된 데이터가 유효한지 확인한다.",
    "option2": "모델 인스턴스가 유효한지 확인한다.",
    "option3": "입력 데이터를 데이터베이스에 저장할 수 있는지 확인한다.",
    "option4": "직렬화된 데이터를 다시 리스트로 변환할 수 있는지 확인한다.",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "DRF Serializer Validation",
    "chapterNum": 5
  },
  {
    "question": "Django에서 Redis를 캐시 백엔드로 사용할 때, `CACHE_TTL` 설정은 무엇을 의미하는가?",
    "option1": "캐시된 데이터의 유효 기간을 설정한다.",
    "option2": "Redis 서버의 연결 타임아웃을 설정한다.",
    "option3": "Redis에 저장된 데이터의 크기를 설정한다.",
    "option4": "캐시를 압축하기 위한 설정이다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Django ORM (기본 내장)",
    "chapterNum": 1
  },
  {
    "question": "Celery에서 주기적인 작업을 관리할 때 사용하는 Django 라이브러리는 무엇인가?",
    "option1": "django-celery-beat",
    "option2": "django-celery-scheduler",
    "option3": "django-celery-tasks",
    "option4": "django-periodic-tasks",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django에서 로깅 설정을 할 때, `LOGGING` 설정에서 `loggers` 항목은 무엇을 설정하는가?",
    "option1": "로그를 출력할 형식을 설정한다.",
    "option2": "어떤 로깅 기능을 사용할지 설정한다.",
    "option3": "로그 레벨을 설정한다.",
    "option4": "어떤 로그를 저장할지 설정한다.",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Django Auth, Simple JWT",
    "chapterNum": 2
  },
  {
    "question": "Django에서 `pytest-django` 라이브러리를 사용할 때, 테스트 데이터베이스는 기본적으로 어떻게 설정되는가?",
    "option1": "테스트 실행 전에 자동으로 새로 생성된다.",
    "option2": "기존 데이터베이스를 사용한다.",
    "option3": "매번 데이터를 삭제하고 새로 생성된다.",
    "option4": "테스트 데이터베이스는 수동으로 생성해야 한다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "drf-yasg, drf-spectacular",
    "chapterNum": 4
  },
  {
    "question": "Django에서 Gunicorn을 사용할 때, 기본적으로 어떤 프로세스를 사용하여 요청을 처리하는가?",
    "option1": "Worker 프로세스",
    "option2": "Thread 프로세스",
    "option3": "Master 프로세스",
    "option4": "Manager 프로세스",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Django REST Framework (DRF)",
    "chapterNum": 3
  }
]