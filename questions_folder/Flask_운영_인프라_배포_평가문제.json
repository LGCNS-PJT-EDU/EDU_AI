[
  {
    "question": "Flask 애플리케이션을 프로덕션 환경에서 실행하기 위한 WSGI 서버는 무엇인가?",
    "option1": "Flask run",
    "option2": "Waitress",
    "option3": "Werkzeug",
    "option4": "debugger",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Flask 실행 및 운영 (Gunicorn, Waitress 등)",
    "chapterNum": 1
  },
  {
    "question": "`flask run` 명령어의 주요 용도는 무엇인가?",
    "option1": "운영 서버 배포",
    "option2": "테스트 코드 실행",
    "option3": "개발 서버 실행",
    "option4": "Docker 빌드",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Flask 실행 및 운영 (Gunicorn, Waitress 등)",
    "chapterNum": 1
  },
  {
    "question": "Flask 애플리케이션을 Nginx와 함께 배포할 때 사용하는 포워딩 설정은 어떤 포트가 일반적인가?",
    "option1": "5000",
    "option2": "80",
    "option3": "3000",
    "option4": "8000",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Flask 배포 (Docker, Nginx)",
    "chapterNum": 2
  },
  {
    "question": "Dockerfile에서 Flask 앱 실행을 위해 자주 사용하는 명령은?",
    "option1": "flask serve",
    "option2": "python run.py",
    "option3": "gunicorn app:app",
    "option4": "nginx -g 'daemon off;'",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Flask 배포 (Docker, Nginx)",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 환경 설정을 외부 파일로 관리하려면 사용하는 메서드는?",
    "option1": "app.config.set_default()",
    "option2": "app.set_env()",
    "option3": "app.load_env()",
    "option4": "app.config.from_envvar()",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "Flask 애플리케이션에서 `.env` 파일을 읽어들이기 위해 사용하는 라이브러리는?",
    "option1": "flask-dotenv",
    "option2": "python-decouple",
    "option3": "dotenv",
    "option4": "python-dotenv",
    "answerIndex": 4,
    "difficulty": "하",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "GitHub Actions에서 CI를 위해 작성하는 파일의 기본 위치는?",
    "option1": ".github/ci.yml",
    "option2": ".github/workflows/ci.yml",
    "option3": "ci/github.yml",
    "option4": "workflows/.github.yml",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "CI/CD에서 DockerHub와 GitHub Actions를 연동하기 위해 필요한 인증 정보는?",
    "option1": "GITHUB_TOKEN",
    "option2": "DOCKER_PASS",
    "option3": "DOCKERHUB_USERNAME / DOCKERHUB_TOKEN",
    "option4": "FLASK_SECRET",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "정적파일을 S3로 서빙할 경우, Flask에서 해당 URL을 설정할 키는?",
    "option1": "STATIC_FOLDER_URL",
    "option2": "S3_BUCKET",
    "option3": "STATIC_URL",
    "option4": "S3_STATIC_PATH",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 로깅을 파일로 남기려면 설정해야 하는 기본 로깅 레벨은?",
    "option1": "logging.INFO",
    "option2": "logging.DEBUG",
    "option3": "logging.ERROR",
    "option4": "logging.WARNING",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 Gunicorn을 사용할 때 사용하는 기본 WSGI 진입점은?",
    "option1": "run.py",
    "option2": "app.py",
    "option3": "wsgi.py",
    "option4": "entrypoint.sh",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Flask 실행 및 운영 (Gunicorn, Waitress 등)",
    "chapterNum": 1
  },
  {
    "question": "Waitress는 어떤 환경에서 주로 사용되는 Flask 서버인가?",
    "option1": "Windows 운영환경",
    "option2": "Linux 운영환경",
    "option3": "macOS 운영환경",
    "option4": "Kubernetes 환경",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 실행 및 운영 (Gunicorn, Waitress 등)",
    "chapterNum": 1
  },
  {
    "question": "Flask + Gunicorn + Nginx 아키텍처에서 클라이언트의 요청을 처음 받는 컴포넌트는?",
    "option1": "Flask",
    "option2": "Gunicorn",
    "option3": "Nginx",
    "option4": "Docker",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Flask 배포 (Docker, Nginx)",
    "chapterNum": 2
  },
  {
    "question": "Docker에서 Flask 애플리케이션을 자동으로 재빌드하고 배포하려면 필요한 CI/CD 도구는?",
    "option1": "GitHub Actions",
    "option2": "Jenkins",
    "option3": "Travis CI",
    "option4": "All of the above",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "Flask 설정에서 `.env`의 값을 코드에서 가져오기 위해 사용하는 Python 표준 라이브러리는?",
    "option1": "os",
    "option2": "sys",
    "option3": "dotenv",
    "option4": "envlib",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "Flask 앱에서 Sentry를 연동하여 사용하는 목적은?",
    "option1": "트래픽 분산",
    "option2": "오류 추적 및 알림",
    "option3": "정적파일 서빙",
    "option4": "서버 실행 속도 향상",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "Flask Exporter를 Prometheus와 함께 사용할 때 주로 수집하는 정보는?",
    "option1": "HTML 구조",
    "option2": "서버 부하와 요청 수",
    "option3": "클라이언트 쿠키",
    "option4": "Flask 버전",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 `.env`를 자동으로 로드하기 위해 애플리케이션 시작 시 호출해야 하는 함수는?",
    "option1": "load_env_file()",
    "option2": "dotenv.load_dotenv()",
    "option3": "app.env.load()",
    "option4": "os.loadenv()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "GitHub Actions에서 Docker 이미지 빌드 후 푸시를 수행하는 단계 이름은?",
    "option1": "build-and-push",
    "option2": "docker-compile",
    "option3": "image-updater",
    "option4": "docker-release",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 정적파일을 직접 서빙하지 않고 S3를 사용하는 이유는?",
    "option1": "보안 향상",
    "option2": "서버 부하 감소",
    "option3": "요청 처리 속도 향상",
    "option4": "모든 항목",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "Gunicorn에서 worker 프로세스를 지정하려면 어떤 옵션을 사용해야 하나?",
    "option1": "-p",
    "option2": "-w",
    "option3": "--port",
    "option4": "--concurrency",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Flask 실행 및 운영 (Gunicorn, Waitress 등)",
    "chapterNum": 1
  },
  {
    "question": "Waitress 서버의 주요 특징은?",
    "option1": "멀티 스레딩 불가",
    "option2": "비동기 지원",
    "option3": "Windows 친화적 WSGI 서버",
    "option4": "HTTPS 내장",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Flask 실행 및 운영 (Gunicorn, Waitress 등)",
    "chapterNum": 1
  },
  {
    "question": "Flask 애플리케이션을 Docker로 배포할 때, 가장 먼저 작성해야 하는 파일은?",
    "option1": "requirements.txt",
    "option2": "Dockerfile",
    "option3": "entrypoint.sh",
    "option4": "nginx.conf",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Flask 배포 (Docker, Nginx)",
    "chapterNum": 2
  },
  {
    "question": "Nginx에서 Flask의 5000번 포트로 요청을 프록시할 때 사용하는 지시는?",
    "option1": "proxy_url",
    "option2": "forward_pass",
    "option3": "proxy_pass",
    "option4": "location_pass",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Flask 배포 (Docker, Nginx)",
    "chapterNum": 2
  },
  {
    "question": "`.env` 파일의 일반적인 위치는 어디인가?",
    "option1": "static 폴더",
    "option2": "templates 폴더",
    "option3": "프로젝트 루트 디렉토리",
    "option4": "venv 폴더",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "Flask 설정에서 `DEBUG=True`는 어떤 환경을 의미하나?",
    "option1": "운영 환경",
    "option2": "로컬 개발 환경",
    "option3": "테스트 환경",
    "option4": "배포 전 환경",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "GitHub Actions의 `.yml` 파일에서 사용하는 문법은?",
    "option1": "JSON",
    "option2": "YAML",
    "option3": "INI",
    "option4": "XML",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "CI에서 테스트가 실패했을 때 다음 단계로 넘어가지 않게 하려면?",
    "option1": "continue-on-error: true",
    "option2": "if: failure()",
    "option3": "exit-on-fail: true",
    "option4": "continue-on-error: false",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "S3에 정적파일을 업로드할 때 사용하는 CLI 명령어는?",
    "option1": "aws upload-file",
    "option2": "aws s3 cp",
    "option3": "aws s3 move",
    "option4": "aws deploy",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 기본 로깅 설정 없이도 로그를 남기기 위한 모듈은?",
    "option1": "loguru",
    "option2": "logging",
    "option3": "flask_logger",
    "option4": "logfile",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "Gunicorn의 worker 타입 중 async I/O 기반으로 많이 쓰이는 것은?",
    "option1": "sync",
    "option2": "gevent",
    "option3": "eventlet",
    "option4": "thread",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Flask 실행 및 운영 (Gunicorn, Waitress 등)",
    "chapterNum": 1
  },
  {
    "question": "Nginx 설정에서 CORS 허용을 위해 설정해야 할 헤더는?",
    "option1": "Access-Control-Allow-Origin",
    "option2": "Allow-Origin",
    "option3": "CORS-Enabled",
    "option4": "Cross-Origin-Allow",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 배포 (Docker, Nginx)",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 환경 변수로 비밀 키를 설정하는 가장 안전한 방법은?",
    "option1": "코드에 하드코딩",
    "option2": "config.py에 저장",
    "option3": "환경 변수로 분리하여 관리",
    "option4": ".gitignore에 추가",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "GitHub Actions에서 특정 브랜치에만 CI가 실행되게 하려면 어떤 키워드를 사용하는가?",
    "option1": "branches",
    "option2": "trigger",
    "option3": "on-push",
    "option4": "runs-on",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "DockerHub에 자동 푸시되도록 하려면 GitHub Actions에서 필요한 단계는?",
    "option1": "setup-python",
    "option2": "build",
    "option3": "login to DockerHub",
    "option4": "nginx-reload",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 Prometheus Exporter를 사용할 때 가장 많이 쓰는 경로는?",
    "option1": "/metrics",
    "option2": "/status",
    "option3": "/monitor",
    "option4": "/health",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "Sentry에서 Flask 에러를 추적하려면 어떤 방식으로 연동하는가?",
    "option1": "Flask extension으로 추가",
    "option2": "REST API로 직접 호출",
    "option3": "HTML 템플릿에 삽입",
    "option4": "S3에서 불러오기",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "`.env`에서 값을 가져올 때 발생할 수 있는 예외는?",
    "option1": "KeyNotFoundError",
    "option2": "ValueMissingException",
    "option3": "KeyError",
    "option4": "FileAccessError",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "Nginx 설정에서 정적파일 경로를 지정할 때 사용하는 지시어는?",
    "option1": "static_url",
    "option2": "location",
    "option3": "directory",
    "option4": "static_pass",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Flask 배포 (Docker, Nginx)",
    "chapterNum": 2
  },
  {
    "question": "DockerHub에 이미지를 푸시할 때 사용하는 명령은?",
    "option1": "docker send",
    "option2": "docker push",
    "option3": "docker deploy",
    "option4": "docker post",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "Flask 서버를 Gunicorn으로 실행할 때 권장되는 명령어는?",
    "option1": "python app.py",
    "option2": "flask run",
    "option3": "gunicorn app:app",
    "option4": "waitress-serve app:app",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Flask 실행 및 운영 (Gunicorn, Waitress 등)",
    "chapterNum": 1
  },
  {
    "question": "Docker에서 Flask 앱이 변경될 때마다 자동으로 재시작하려면 어떤 옵션을 사용해야 하나?",
    "option1": "--no-cache",
    "option2": "--watch",
    "option3": "volumes",
    "option4": "bind mount",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "Flask 배포 (Docker, Nginx)",
    "chapterNum": 2
  },
  {
    "question": "Flask 앱 설정에서 `app.config.from_envvar()`의 목적은?",
    "option1": "환경변수로 로깅 설정",
    "option2": "환경 변수에서 설정 파일 경로를 받아 설정",
    "option3": "환경 변수로 디버그 여부 설정",
    "option4": "환경 변수에 설정 저장",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "GitHub Actions의 Job 단계 중 가장 먼저 수행되는 단계는?",
    "option1": "build",
    "option2": "name",
    "option3": "runs-on",
    "option4": "steps",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 로깅 수준을 DEBUG로 설정하려면 어떤 코드가 필요한가?",
    "option1": "logging.level = DEBUG",
    "option2": "app.logger.setLevel(logging.DEBUG)",
    "option3": "logger.debug = True",
    "option4": "app.log_mode('debug')",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  },
  {
    "question": "Waitress를 사용하여 Windows 환경에서 Flask를 실행하려면?",
    "option1": "waitress-serve --call 'app:create_app'",
    "option2": "gunicorn app:app",
    "option3": "flask run --windows",
    "option4": "uwsgi --http app:app",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 실행 및 운영 (Gunicorn, Waitress 등)",
    "chapterNum": 1
  },
  {
    "question": "Dockerfile에서 Python 패키지를 설치할 때 보통 사용하는 명령어는?",
    "option1": "RUN install -r requirements.txt",
    "option2": "RUN pip install requirements.txt",
    "option3": "RUN pip install -r requirements.txt",
    "option4": "RUN apt-get requirements.txt",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Flask 배포 (Docker, Nginx)",
    "chapterNum": 2
  },
  {
    "question": "Flask config에서 설정 값을 불러오는 방법 중 올바른 것은?",
    "option1": "app.config['DEBUG']",
    "option2": "app.settings.debug",
    "option3": "app.env.DEBUG",
    "option4": "app['DEBUG']",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "환경 설정 (.env, Flask.config)",
    "chapterNum": 3
  },
  {
    "question": "GitHub Actions에서 비밀 정보를 안전하게 사용하는 방법은?",
    "option1": "코드에 직접 입력",
    "option2": "환경변수에 저장",
    "option3": "secrets에 저장하고 `${{ secrets.KEY }}`로 접근",
    "option4": "브랜치에 하드코딩",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "CI/CD (GitHub Actions, DockerHub)",
    "chapterNum": 4
  },
  {
    "question": "Sentry에서 에러 발생 시 수집되는 정보가 아닌 것은?",
    "option1": "stack trace",
    "option2": "브라우저 버전",
    "option3": "사용자 비밀번호",
    "option4": "요청 URL",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)",
    "chapterNum": 5
  }
]