[
  {
    "question": "Redux의 핵심 개념은?",
    "option1": "컴포넌트 상태 공유",
    "option2": "단일 상태 트리",
    "option3": "다중 스토어 구조",
    "option4": "컴파일 시간 상태",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Redux에서 상태를 변경할 수 있는 유일한 방법은?",
    "option1": "Reducer 호출",
    "option2": "Store 직접 수정",
    "option3": "Action dispatch",
    "option4": "State mutation",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Redux에서 상태를 저장하는 객체는?",
    "option1": "store",
    "option2": "reducer",
    "option3": "action",
    "option4": "component",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Redux의 세 가지 핵심 원칙 중 아닌 것은?",
    "option1": "상태는 단일 객체로 저장된다",
    "option2": "상태는 직접 수정할 수 있다",
    "option3": "상태 변경은 순수 함수로 수행된다",
    "option4": "상태는 읽기 전용이다",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Redux를 사용하는 주요 이유는?",
    "option1": "성능 향상",
    "option2": "상태 공유와 예측 가능한 흐름",
    "option3": "렌더링 속도 증가",
    "option4": "자동 라우팅",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Redux의 상태는 어떤 성격을 가진다?",
    "option1": "비순차적",
    "option2": "비동기적",
    "option3": "불변(immutable)",
    "option4": "동적 변경 가능",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "React에서 Redux를 연결하는 가장 일반적인 라이브러리는?",
    "option1": "react-redux",
    "option2": "redux-connect",
    "option3": "react-context",
    "option4": "redux-react",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Redux의 동작 방식에 가장 가까운 비유는?",
    "option1": "게시판에 메모 남기기",
    "option2": "직접 수정",
    "option3": "데이터베이스 삽입",
    "option4": "로컬스토리지 저장",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Redux 상태 트리에서 상태를 변경하는 순수 함수는?",
    "option1": "action",
    "option2": "dispatcher",
    "option3": "reducer",
    "option4": "store",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Redux는 어떤 디자인 패턴에 기반하고 있는가?",
    "option1": "MVC",
    "option2": "Observer",
    "option3": "Flux",
    "option4": "Factory",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Redux 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Redux에서 액션 객체는 어떤 필드를 반드시 포함해야 하는가?",
    "option1": "payload",
    "option2": "type",
    "option3": "value",
    "option4": "dispatch",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "Reducer 함수의 주요 특징은?",
    "option1": "비결정적 함수",
    "option2": "부작용을 가진 함수",
    "option3": "순수 함수",
    "option4": "비동기 함수",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "리듀서는 어떤 값을 반환해야 하는가?",
    "option1": "dispatch 함수",
    "option2": "변경된 상태",
    "option3": "액션 객체",
    "option4": "이벤트 객체",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "다음 중 올바른 액션 생성자 함수는?",
    "option1": "create(type)",
    "option2": "generateAction()",
    "option3": "dispatchAction()",
    "option4": "function that returns a type and optional payload",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "액션 생성자(action creator)는 무엇을 반환하는가?",
    "option1": "dispatch",
    "option2": "reducer",
    "option3": "액션 객체",
    "option4": "상태 트리",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "리듀서가 상태를 변경할 수 있는 조건은?",
    "option1": "외부 상태 참조",
    "option2": "새로운 상태 객체 반환",
    "option3": "상태 직접 수정",
    "option4": "DOM 접근",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "여러 개의 리듀서를 하나로 합치기 위해 사용하는 함수는?",
    "option1": "combine()",
    "option2": "mergeReducers()",
    "option3": "combineReducers()",
    "option4": "createReducers()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "리듀서 내부에서 상태를 변경할 때 가장 중요한 규칙은?",
    "option1": "기존 상태를 직접 수정",
    "option2": "payload에 따라 조건 분기",
    "option3": "새 상태를 복사 후 반환",
    "option4": "state를 삭제 후 생성",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "dispatch는 어떤 역할을 하는가?",
    "option1": "리듀서 실행",
    "option2": "상태 조회",
    "option3": "스토어 생성",
    "option4": "미들웨어 실행",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "type 값이 없는 액션을 dispatch하면?",
    "option1": "에러 발생",
    "option2": "무시됨",
    "option3": "무작위 처리",
    "option4": "store 초기화",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "액션과 리듀서",
    "chapterNum": 2
  },
  {
    "question": "Redux에서 상태를 저장하는 핵심 객체는?",
    "option1": "provider",
    "option2": "store",
    "option3": "context",
    "option4": "reducer",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "스토어를 생성할 때 사용하는 함수는?",
    "option1": "createStore()",
    "option2": "makeStore()",
    "option3": "initStore()",
    "option4": "buildStore()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "Redux에서 상태를 조회하는 함수는?",
    "option1": "getState()",
    "option2": "useState()",
    "option3": "state()",
    "option4": "readState()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "스토어에 리듀서를 연결하는 역할은?",
    "option1": "dispatch()",
    "option2": "subscribe()",
    "option3": "combineReducers()",
    "option4": "reducer()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "React와 Redux를 연결하는 최상위 컴포넌트는?",
    "option1": "Provider",
    "option2": "Connect",
    "option3": "ReduxWrapper",
    "option4": "StoreBridge",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "스토어에서 구독을 해제하는 방법은?",
    "option1": "unsubscribe()",
    "option2": "remove()",
    "option3": "detach()",
    "option4": "off()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "상태 변경 시마다 실행되는 함수를 등록하려면?",
    "option1": "subscribe()",
    "option2": "watch()",
    "option3": "track()",
    "option4": "observer()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "Redux에서 상태 변경이 일어나면 어떤 방식으로 UI가 갱신되는가?",
    "option1": "자동 갱신",
    "option2": "store에서 직접 렌더링",
    "option3": "구독 함수 호출",
    "option4": "action에서 직접 수정",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "store.dispatch()는 어떤 역할을 수행하는가?",
    "option1": "리듀서 초기화",
    "option2": "액션 전달 및 상태 변경",
    "option3": "상태 초기화",
    "option4": "UI 리렌더링",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "Redux에서 상태는 어떤 구조로 저장되는가?",
    "option1": "클래스 객체",
    "option2": "Map",
    "option3": "단일 JSON 객체",
    "option4": "배열 트리",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "스토어와 상태 관리",
    "chapterNum": 3
  },
  {
    "question": "Redux 미들웨어의 주된 목적은?",
    "option1": "스토어 생성",
    "option2": "비동기 로직 처리",
    "option3": "UI 렌더링",
    "option4": "액션 강제 취소",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "Redux에서 미들웨어를 적용할 때 사용하는 함수는?",
    "option1": "applyMiddleware()",
    "option2": "useMiddleware()",
    "option3": "createMiddleware()",
    "option4": "bindMiddleware()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "Redux에서 비동기 액션을 처리하기 위해 사용하는 대표적 미들웨어는?",
    "option1": "redux-thunk",
    "option2": "redux-loop",
    "option3": "redux-saga",
    "option4": "redux-promise",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "redux-thunk 미들웨어를 사용하면 액션 생성자가 반환할 수 있는 것은?",
    "option1": "객체만 가능",
    "option2": "문자열",
    "option3": "함수",
    "option4": "숫자",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "redux-saga는 어떤 문법을 활용하는가?",
    "option1": "callback",
    "option2": "async/await",
    "option3": "generator",
    "option4": "observable",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "비동기 요청 중 상태를 관리하기 위한 일반적인 상태 값은?",
    "option1": "loading, success, error",
    "option2": "fetch, render, complete",
    "option3": "start, wait, end",
    "option4": "idle, go, stop",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "redux-logger의 역할은?",
    "option1": "에러 처리",
    "option2": "비동기 요청",
    "option3": "상태 변경 기록 출력",
    "option4": "로딩 스피너 표시",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "thunk 함수 내부에서 dispatch를 호출하는 이유는?",
    "option1": "에러를 던지기 위해",
    "option2": "상태를 초기화하기 위해",
    "option3": "비동기 완료 후 상태 변경하기 위해",
    "option4": "스토어 삭제하기 위해",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "미들웨어는 액션과 리듀서 사이에서 어떤 역할을 하는가?",
    "option1": "액션 필터링",
    "option2": "액션 로깅 및 비동기 처리",
    "option3": "컴포넌트 렌더링",
    "option4": "HTML 반환",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "비동기 요청 시 공통된 처리 로직을 중앙화하려면 어떻게 해야 하는가?",
    "option1": "리듀서에 작성",
    "option2": "컴포넌트 내부 처리",
    "option3": "미들웨어에서 처리",
    "option4": "스토어에서 처리",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "미들웨어와 비동기 처리",
    "chapterNum": 4
  },
  {
    "question": "Redux Toolkit에서 스토어를 생성하는 함수는?",
    "option1": "createStore()",
    "option2": "initStore()",
    "option3": "configureStore()",
    "option4": "setupStore()",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  },
  {
    "question": "Redux Toolkit은 어떤 목적을 가지고 설계되었는가?",
    "option1": "성능 향상",
    "option2": "코드 간결성 및 표준화",
    "option3": "미들웨어 제거",
    "option4": "상태 공유 방지",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  },
  {
    "question": "Redux Toolkit에서 액션 생성과 리듀서를 동시에 정의할 수 있는 함수는?",
    "option1": "createReducer()",
    "option2": "createSlice()",
    "option3": "combineReducer()",
    "option4": "createAction()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  },
  {
    "question": "createSlice로 생성한 리듀서의 액션은 어디에 정의되는가?",
    "option1": "slice.actions",
    "option2": "slice.reducers",
    "option3": "slice.dispatch",
    "option4": "slice.state",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  },
  {
    "question": "Redux Toolkit에서 상태 불변성 유지를 위해 사용하는 라이브러리는?",
    "option1": "Immutable.js",
    "option2": "Immer",
    "option3": "ProxyState",
    "option4": "DraftState",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  },
  {
    "question": "Redux Toolkit에서 비동기 처리를 위해 사용하는 함수는?",
    "option1": "createAsyncThunk()",
    "option2": "useEffect()",
    "option3": "thunkReducer()",
    "option4": "createThunk()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  },
  {
    "question": "Redux Toolkit에서 slice를 사용할 때 필요한 속성이 아닌 것은?",
    "option1": "name",
    "option2": "initialState",
    "option3": "reducers",
    "option4": "selectors",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  },
  {
    "question": "Redux Toolkit에서 extraReducers의 주요 용도는?",
    "option1": "미들웨어 등록",
    "option2": "비동기 액션 처리",
    "option3": "스토어 설정",
    "option4": "로컬 상태 저장",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  },
  {
    "question": "Redux Toolkit은 어떤 미들웨어를 기본 포함하는가?",
    "option1": "redux-thunk",
    "option2": "redux-logger",
    "option3": "redux-saga",
    "option4": "redux-observable",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  },
  {
    "question": "Redux Toolkit에서 slice로부터 리듀서를 가져올 때 사용하는 속성은?",
    "option1": "slice.state",
    "option2": "slice.reducer",
    "option3": "slice.actions",
    "option4": "slice.dispatch",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Redux Toolkit",
    "chapterNum": 5
  }
]