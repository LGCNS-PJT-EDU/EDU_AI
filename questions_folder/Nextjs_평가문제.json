[
  {
    "question": "Next.js는 어떤 프레임워크를 기반으로 만들어졌는가?",
    "option1": "Vue.js",
    "option2": "React.js",
    "option3": "Angular",
    "option4": "Svelte",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js 프로젝트를 생성하는 명령어는?",
    "option1": "npx create-react-app",
    "option2": "npx create-next-app",
    "option3": "npm init next",
    "option4": "yarn next-create",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js에서 기본적으로 제공하는 파일 기반 라우팅 디렉토리는?",
    "option1": "src/",
    "option2": "routes/",
    "option3": "pages/",
    "option4": "views/",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js의 기본 개발 서버 실행 명령어는?",
    "option1": "npm run dev",
    "option2": "npm start",
    "option3": "yarn build",
    "option4": "next run",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js에서 build 후 production 서버를 실행하는 명령어는?",
    "option1": "npm run start",
    "option2": "npm run serve",
    "option3": "next serve",
    "option4": "yarn start",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js가 지원하는 기본 렌더링 방식은?",
    "option1": "CSR",
    "option2": "SSR",
    "option3": "SSG",
    "option4": "SSR과 SSG 모두 지원",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js 설정 파일 이름은?",
    "option1": "nextconfig.js",
    "option2": "next.config.js",
    "option3": "config.next.js",
    "option4": "next.js.config",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js 프로젝트 루트에 있어야 하는 디렉토리가 아닌 것은?",
    "option1": "pages",
    "option2": "public",
    "option3": "styles",
    "option4": "controllers",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js의 public 디렉토리는 어떤 용도로 사용되는가?",
    "option1": "API 정의",
    "option2": "정적 파일 제공",
    "option3": "라우팅 설정",
    "option4": "컴포넌트 저장",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js를 사용하면 얻을 수 있는 주요 이점은?",
    "option1": "완전한 CSR",
    "option2": "SSR 및 SEO 최적화",
    "option3": "SPA 전용",
    "option4": "서버 부하 증가",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Next.js 기본 개념과 프로젝트 설정",
    "chapterNum": 1
  },
  {
    "question": "Next.js에서 새로운 페이지를 생성하려면 어디에 파일을 추가해야 하는가?",
    "option1": "components/",
    "option2": "pages/",
    "option3": "public/",
    "option4": "api/",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "Next.js에서 페이지 이동을 위해 사용하는 컴포넌트는?",
    "option1": "Navigate",
    "option2": "RouterLink",
    "option3": "Link",
    "option4": "Move",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "Next.js에서 프로그래밍 방식으로 페이지 이동을 할 때 사용하는 훅은?",
    "option1": "useHistory",
    "option2": "useNavigate",
    "option3": "useRouter",
    "option4": "useLocation",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "Link 컴포넌트 안에 필수적으로 포함해야 하는 것은?",
    "option1": "<a> 태그",
    "option2": "<button> 태그",
    "option3": "<div> 태그",
    "option4": "<p> 태그",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "Next.js의 동적 라우팅(dynamic routing)은 어떤 파일명 패턴을 사용하는가?",
    "option1": "page.js",
    "option2": "[param].js",
    "option3": "{param}.js",
    "option4": "param.js",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "Next.js에서 catch-all 라우트를 만들기 위한 파일명 패턴은?",
    "option1": "[...param].js",
    "option2": "[[param]].js",
    "option3": "{param}.js",
    "option4": "(param).js",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "useRouter 훅을 사용하여 현재 경로(path)를 가져오는 속성은?",
    "option1": "route",
    "option2": "pathname",
    "option3": "path",
    "option4": "currentPath",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "Next.js에서 URL 쿼리 파라미터를 가져오기 위해 사용하는 것은?",
    "option1": "useQuery",
    "option2": "useRouter().query",
    "option3": "getQuery()",
    "option4": "router.param",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "Next.js에서 404 페이지를 커스텀하려면 어떤 파일을 만들어야 하는가?",
    "option1": "404.js",
    "option2": "error.js",
    "option3": "notfound.js",
    "option4": "fail.js",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "Next.js에서 중첩된 라우팅(nested routing)을 구성하는 방법은?",
    "option1": "routes 디렉토리 추가",
    "option2": "pages 안에 디렉토리 생성",
    "option3": "src 안에 폴더 생성",
    "option4": "components에 파일 추가",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "라우팅과 네비게이션",
    "chapterNum": 2
  },
  {
    "question": "Next.js에서 서버사이드 렌더링(SSR)을 구현할 때 사용하는 함수는?",
    "option1": "getStaticProps",
    "option2": "getServerSideProps",
    "option3": "useEffect",
    "option4": "getInitialProps",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "Next.js에서 정적 사이트 생성(SSG)을 할 때 사용하는 함수는?",
    "option1": "getStaticProps",
    "option2": "getServerSideProps",
    "option3": "getInitialProps",
    "option4": "fetchData",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "Next.js의 Incremental Static Regeneration(ISR)은 무엇을 의미하는가?",
    "option1": "모든 페이지를 미리 생성",
    "option2": "정적 페이지를 주기적으로 재생성",
    "option3": "페이지를 항상 서버에서 생성",
    "option4": "클라이언트 사이드 데이터 요청",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "getServerSideProps는 언제 호출되는가?",
    "option1": "빌드 타임",
    "option2": "클라이언트 렌더링 시",
    "option3": "요청 시마다",
    "option4": "페이지 로드 후",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "Next.js에서 클라이언트 사이드에서 데이터를 가져올 때 사용하는 방법은?",
    "option1": "getStaticProps",
    "option2": "getServerSideProps",
    "option3": "useEffect와 fetch",
    "option4": "getInitialProps",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "getStaticPaths는 어떤 상황에서 필요한가?",
    "option1": "정적 경로를 미리 정의할 때",
    "option2": "서버사이드 렌더링 할 때",
    "option3": "API 호출 시",
    "option4": "라우터 초기화 시",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "Next.js에서 Fallback: true 설정은 어떤 의미인가?",
    "option1": "모든 페이지를 미리 생성",
    "option2": "없으면 404 반환",
    "option3": "없는 페이지는 생성 후 제공",
    "option4": "서버에서 강제 새로고침",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "Next.js에서 데이터 Fetching 최적화를 위한 기본 전략은?",
    "option1": "모든 요청 서버 처리",
    "option2": "정적 생성 + 필요 시 서버 요청",
    "option3": "CSR만 사용",
    "option4": "SSR만 사용",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "getServerSideProps, getStaticProps 함수에서 반환해야 하는 객체 속성은?",
    "option1": "response",
    "option2": "data",
    "option3": "props",
    "option4": "serverData",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "Next.js에서 클라이언트 요청에 따라 서버에서 매번 렌더링하는 방식은?",
    "option1": "SSG",
    "option2": "SSR",
    "option3": "ISR",
    "option4": "CSR",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "데이터 페칭과 렌더링 방식",
    "chapterNum": 3
  },
  {
    "question": "Next.js에서 API Route를 만들려면 파일을 어디에 생성해야 하는가?",
    "option1": "api/",
    "option2": "pages/api/",
    "option3": "server/",
    "option4": "routes/",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "Next.js API Route는 기본적으로 어떤 메서드를 지원하는가?",
    "option1": "GET만",
    "option2": "POST만",
    "option3": "GET과 POST 모두",
    "option4": "PUT만",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "Next.js API Route 핸들러 함수의 첫 번째 파라미터는 무엇인가?",
    "option1": "props",
    "option2": "req",
    "option3": "context",
    "option4": "event",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "Next.js API Route 핸들러 함수의 두 번째 파라미터는 무엇인가?",
    "option1": "res",
    "option2": "data",
    "option3": "ctx",
    "option4": "params",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "Next.js API Route에서 클라이언트에 JSON 응답을 보내는 방법은?",
    "option1": "res.end()",
    "option2": "res.send()",
    "option3": "res.json()",
    "option4": "res.write()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "Next.js API Route에서 요청 메서드에 따라 분기할 때 사용하는 속성은?",
    "option1": "req.method",
    "option2": "req.type",
    "option3": "req.query",
    "option4": "req.header",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "Next.js API Route의 파일 이름이 [id].js일 때 의미하는 것은?",
    "option1": "정적 파일",
    "option2": "동적 라우트",
    "option3": "SSR 페이지",
    "option4": "API Fetch용 파일",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "API Route를 통해 서버 측에서 환경 변수를 사용하는 파일은?",
    "option1": ".gitignore",
    "option2": ".env.local",
    "option3": "package.json",
    "option4": "server.js",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "Next.js API Route에서 404 에러를 반환할 때 사용하는 응답 코드는?",
    "option1": "200",
    "option2": "500",
    "option3": "404",
    "option4": "401",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "API Route를 클라이언트 컴포넌트에서 호출할 때 가장 일반적으로 사용하는 함수는?",
    "option1": "fetch()",
    "option2": "axios()",
    "option3": "getServerSideProps()",
    "option4": "useRouter()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "API Routes와 서버 기능",
    "chapterNum": 4
  },
  {
    "question": "Next.js에서 이미지 최적화를 위해 사용하는 컴포넌트는?",
    "option1": "<img>",
    "option2": "<Image>",
    "option3": "<NextImage>",
    "option4": "<OptimizedImage>",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  },
  {
    "question": "Next.js에서 동적 import를 위해 사용하는 함수는?",
    "option1": "import()",
    "option2": "dynamic()",
    "option3": "load()",
    "option4": "asyncImport()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  },
  {
    "question": "Next.js에서 코드 스플리팅을 기본으로 지원하는 이유는?",
    "option1": "페이지 별로 코드를 나누어 로딩 속도 개선",
    "option2": "코드를 한 파일로 모으기 위해",
    "option3": "네트워크 트래픽 증가를 위해",
    "option4": "SEO를 위해",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  },
  {
    "question": "Next.js에서 PWA 지원을 위해 추가로 설치할 수 있는 패키지는?",
    "option1": "next-pwa",
    "option2": "next-seo",
    "option3": "next-analytics",
    "option4": "next-cloud",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  },
  {
    "question": "Next.js의 Head 컴포넌트를 제공하는 패키지는?",
    "option1": "next/head",
    "option2": "react-helmet",
    "option3": "next-helmet",
    "option4": "head-next",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  },
  {
    "question": "Next.js에서 글로벌 CSS 파일은 어디에 import해야 하는가?",
    "option1": "모든 컴포넌트 파일",
    "option2": "pages/_app.js",
    "option3": "pages/index.js",
    "option4": "next.config.js",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  },
  {
    "question": "Next.js에서 Static 파일을 최적화하려면 사용하는 디렉토리는?",
    "option1": "src/static",
    "option2": "public/",
    "option3": "static/",
    "option4": "staticFiles/",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  },
  {
    "question": "Next.js에서 외부 API 요청을 서버 측에서 미리 처리하고 싶을 때 사용하는 기능은?",
    "option1": "getStaticProps",
    "option2": "getServerSideProps",
    "option3": "getInitialProps",
    "option4": "serverFetch",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  },
  {
    "question": "Next.js 프로젝트를 Vercel에 배포할 때 특별한 설정이 필요한가?",
    "option1": "필요 없다",
    "option2": "next.config.js 수정 필요",
    "option3": "환경 변수를 수동 설정",
    "option4": "전용 서버 설정 필요",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  },
  {
    "question": "Next.js에서 기본적으로 지원하는 SEO 관련 최적화는 무엇인가?",
    "option1": "정적 페이지 생성",
    "option2": "Server-side Rendering",
    "option3": "코드 스플리팅",
    "option4": "위 모든 것",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "Next.js 고급 기능 및 최적화",
    "chapterNum": 5
  }
]