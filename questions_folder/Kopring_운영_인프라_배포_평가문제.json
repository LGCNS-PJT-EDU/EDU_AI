[
  {
    "question": "Spring Boot 애플리케이션을 실행하기 위해 일반적으로 사용하는 명령어는?",
    "option1": "java -compile app.jar",
    "option2": "run app.jar",
    "option3": "java -jar app.jar",
    "option4": "spring start app.jar",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "Spring에서 서로 다른 설정을 적용하기 위해 사용하는 개념은?",
    "option1": "Environment",
    "option2": "Profile",
    "option3": "Context",
    "option4": "PropertySource",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "Spring Boot에서 활성화된 profile을 설정하는 방법으로 옳은 것은?",
    "option1": "spring.run.profile=dev",
    "option2": "set SPRING_PROFILE=dev",
    "option3": "java -jar app.jar --spring.profiles.active=dev",
    "option4": "profile=dev java -jar app.jar",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "Spring Boot의 기본 내장 웹 서버는?",
    "option1": "Tomcat",
    "option2": "Jetty",
    "option3": "Undertow",
    "option4": "Netty",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "다음 중 Spring 애플리케이션 실행 시 로컬 환경 구분을 위한 올바른 프로퍼티 파일 이름은?",
    "option1": "application-local.json",
    "option2": "application-local.properties",
    "option3": "application@local.yml",
    "option4": "local-application.properties",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "Spring Boot에서 커스텀 포트를 설정하려면 어떤 속성을 사용해야 하나?",
    "option1": "server.custom.port",
    "option2": "spring.port",
    "option3": "server.port",
    "option4": "web.port",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "Spring Boot 프로젝트를 패키징할 때 jar 파일이 실행 가능하게 만들어지는 이유는?",
    "option1": "Gradle이 zip으로 변환해서",
    "option2": "Spring Boot Plugin이 main-class와 dependency를 병합하기 때문에",
    "option3": "Tomcat이 내장되어 있기 때문에",
    "option4": "JVM이 자동으로 클래스 경로를 탐색하기 때문에",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "Spring Boot에서 명시적으로 사용할 profile을 application.properties에 설정할 때 사용하는 키는?",
    "option1": "spring.profile.default",
    "option2": "spring.active",
    "option3": "spring.application.profile",
    "option4": "spring.profiles.active",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "다음 중 Spring Boot 내장 서버가 아닌 것은?",
    "option1": "Tomcat",
    "option2": "Jetty",
    "option3": "Netty",
    "option4": "GlassFish",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "Spring Boot 애플리케이션의 실행 진입점 클래스는 보통 어떤 어노테이션을 사용하나요?",
    "option1": "@EnableAutoConfiguration",
    "option2": "@SpringBootApplication",
    "option3": "@Configuration",
    "option4": "@ComponentScan",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)",
    "chapterNum": 1
  },
  {
    "question": "Spring Boot 애플리케이션을 Docker 컨테이너로 빌드하기 위한 파일은?",
    "option1": "build.gradle",
    "option2": "dockerfile",
    "option3": "Dockerfile",
    "option4": "settings.gradle",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "Nginx에서 다른 서버로 요청을 전달할 때 사용하는 지시어는?",
    "option1": "proxy_pass",
    "option2": "pass_request",
    "option3": "redirect_to",
    "option4": "reverse_pass",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "Spring Boot Docker 이미지 빌드시 자주 사용하는 JDK 기반 경량 베이스 이미지로 적절한 것은?",
    "option1": "ubuntu:latest",
    "option2": "openjdk:17-alpine",
    "option3": "java:11-full",
    "option4": "springboot:base",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "Dockerfile에서 JAR 파일을 실행하는 명령으로 가장 적절한 것은?",
    "option1": "CMD [\"spring\", \"run\", \"app.jar\"]",
    "option2": "RUN app.jar",
    "option3": "CMD [\"java\", \"-jar\", \"app.jar\"]",
    "option4": "ENTRYPOINT app.jar",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "Spring Boot 애플리케이션을 Nginx와 함께 사용할 때 가장 일반적인 아키텍처는?",
    "option1": "Nginx가 프론트엔드 역할, Spring이 백엔드 역할",
    "option2": "Spring이 요청을 받아 Nginx로 전달",
    "option3": "Nginx가 DB 역할 수행",
    "option4": "Spring Boot가 정적 리소스만 처리",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "Docker Compose를 사용할 때 여러 컨테이너 간 네트워크 연결을 자동으로 해주는 기본 네트워크는?",
    "option1": "external",
    "option2": "host",
    "option3": "bridge",
    "option4": "default network",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "HTTPS 통신을 위해 필요한 기본 요소는?",
    "option1": "리버스 프록시",
    "option2": "Docker 이미지",
    "option3": "SSL 인증서",
    "option4": "Spring Profile",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "Nginx 설정에서 443 포트를 사용하는 이유는?",
    "option1": "HTTP 요청을 전달하기 위해",
    "option2": "Docker 컨테이너를 실행하기 위해",
    "option3": "HTTPS 보안을 위해",
    "option4": "Spring Boot 로깅을 위해",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "Spring Boot와 Nginx 연동 시 CORS 문제가 발생할 수 있는 주요 원인은?",
    "option1": "포트 충돌",
    "option2": "Docker 버전 불일치",
    "option3": "프록시 설정 누락",
    "option4": "profile 설정 오류",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "Docker에서 build한 이미지로 컨테이너를 생성할 때 사용하는 명령은?",
    "option1": "docker run",
    "option2": "docker build",
    "option3": "docker start",
    "option4": "docker exec",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)",
    "chapterNum": 2
  },
  {
    "question": "Spring Boot에서 서로 다른 환경별 설정을 분리할 수 있도록 지원하는 기능은?",
    "option1": "Spring Actuator",
    "option2": "Spring Security",
    "option3": "Spring Profile",
    "option4": "Spring JPA",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": "Spring Boot에서 기본 설정 파일 이름은?",
    "option1": "application.json",
    "option2": "config.yml",
    "option3": "application.yml",
    "option4": "settings.xml",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": "Spring Profile을 통해 'dev', 'prod' 설정을 나누었을 때 실행 시 적용할 Profile을 설정하는 방법은?",
    "option1": "spring.profile.active",
    "option2": "spring.profiles.active",
    "option3": "spring.env.active",
    "option4": "spring.profile.set",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": ".env 파일을 통해 환경 변수를 정의하고 Spring에서 사용하려면 어떤 라이브러리를 사용하는 것이 일반적인가?",
    "option1": "spring-boot-starter-data-jpa",
    "option2": "dotenv-java",
    "option3": "spring-cloud",
    "option4": "spring-context-support",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": "application.yml에서 포트를 8081로 설정하려면 어떤 속성을 수정해야 하는가?",
    "option1": "server.host",
    "option2": "spring.port",
    "option3": "server.port",
    "option4": "spring.application.port",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": "다음 중 application.yml에서 profile 별로 설정을 나누는 방법으로 올바른 것은?",
    "option1": "---",
    "option2": "# dev config",
    "option3": "- profile: dev",
    "option4": "---\nspring:\n  profiles: dev",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": "환경 변수로 DB 비밀번호를 설정하고 이를 application.yml에서 참조하려면 사용하는 문법은?",
    "option1": "${DB_PASSWORD}",
    "option2": "@DB_PASSWORD",
    "option3": "#DB_PASSWORD#",
    "option4": "{{ DB_PASSWORD }}",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": "운영환경에서 민감 정보 노출을 피하기 위해 사용하는 설정 전략은?",
    "option1": "모든 설정을 하나의 파일에 저장",
    "option2": "소스코드에 직접 하드코딩",
    "option3": "환경 변수와 Profile 분리 사용",
    "option4": "application.properties에 고정 저장",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": "application.properties 파일에서 사용하는 포맷은?",
    "option1": "JSON",
    "option2": "YAML",
    "option3": "key=value",
    "option4": "INI",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": "Spring Boot에서 환경 변수 우선순위가 가장 높은 설정 방식은?",
    "option1": "application.yml",
    "option2": "application.properties",
    "option3": "명령줄 인자",
    "option4": "Profile 지정",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)",
    "chapterNum": 3
  },
  {
    "question": "CI/CD에서 'CI'는 무엇의 약자인가?",
    "option1": "Code Integration",
    "option2": "Continuous Integration",
    "option3": "Component Integration",
    "option4": "Central Interface",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "GitHub Actions에서 workflow 파일의 기본 경로는?",
    "option1": ".git/workflows/",
    "option2": "ci/config.yml",
    "option3": ".github/workflows/",
    "option4": "docker/actions/",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "GitHub Actions에서 Java 프로젝트의 빌드 도구로 Gradle을 사용할 때 기본 명령어는?",
    "option1": "./gradlew build",
    "option2": "gradle run",
    "option3": "java build",
    "option4": "mvn compile",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "Spring Boot 프로젝트를 DockerHub에 배포하기 위한 Dockerfile에서 사용되는 기본 명령어는?",
    "option1": "ENTRYPOINT",
    "option2": "FROM",
    "option3": "PUBLISH",
    "option4": "STAGE",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "GitHub Actions에서 workflow 실행 조건을 지정할 때 사용하는 키워드는?",
    "option1": "on",
    "option2": "run",
    "option3": "if",
    "option4": "trigger",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "DockerHub에 이미지를 푸시(push)할 때 필요한 인증 정보는?",
    "option1": "API key",
    "option2": "액세스 토큰",
    "option3": "username과 password/token",
    "option4": "SSH key",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "Spring Boot 애플리케이션을 위한 GitHub Actions 워크플로우에서 테스트 단계를 실행하려면 어떤 명령어가 적절한가?",
    "option1": "./gradlew run",
    "option2": "./gradlew test",
    "option3": "mvn clean",
    "option4": "java -jar app.jar",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "GitHub Actions에서 비공개 정보(예: DockerHub 토큰)를 저장하기 위한 공간은?",
    "option1": "Repository Settings > Webhooks",
    "option2": ".env 파일",
    "option3": "Repository Settings > Secrets",
    "option4": "Actions Cache",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "Spring Boot 프로젝트에서 GitHub Actions로 CI/CD를 구성할 때, 주로 사용되는 Java 버전 지정 키는?",
    "option1": "java_version",
    "option2": "version",
    "option3": "java.setup",
    "option4": "java-version",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "GitHub Actions에서 여러 Job을 병렬로 실행하고 싶을 때 사용하는 키워드는?",
    "option1": "matrix",
    "option2": "concurrent",
    "option3": "parallel",
    "option4": "multi",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "CI/CD (GitHub Actions, DockerHub, Gradle 등)",
    "chapterNum": 4
  },
  {
    "question": "Spring Boot 애플리케이션의 상태를 확인할 수 있는 라이브러리는?",
    "option1": "Spring Security",
    "option2": "Spring Web",
    "option3": "Spring Boot Actuator",
    "option4": "Spring AOP",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  },
  {
    "question": "Spring Boot Actuator의 기본 엔드포인트 중 메트릭 정보를 제공하는 것은?",
    "option1": "/actuator/loggers",
    "option2": "/actuator/metrics",
    "option3": "/actuator/info",
    "option4": "/actuator/env",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  },
  {
    "question": "Spring Boot와 Micrometer를 함께 사용할 때 메트릭 데이터를 Prometheus로 수집하려면 어떤 의존성이 필요한가?",
    "option1": "micrometer-registry-prometheus",
    "option2": "micrometer-core",
    "option3": "spring-boot-starter-security",
    "option4": "spring-cloud-prometheus",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  },
  {
    "question": "Spring Boot에서 로깅 구성 시 application.yml 파일에서 설정할 수 있는 로깅 레벨은?",
    "option1": "ERROR, WARN, INFO, DEBUG, TRACE",
    "option2": "CRITICAL, ALERT, DEBUG",
    "option3": "HIGH, MEDIUM, LOW",
    "option4": "ALL, NONE, CUSTOM",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  },
  {
    "question": "다음 중 로그를 구조화된 형태로 수집하고 시각화하는 도구 조합으로 가장 적절한 것은?",
    "option1": "Nginx + Logrotate",
    "option2": "Docker + Redis",
    "option3": "ELK Stack (Elasticsearch, Logstash, Kibana)",
    "option4": "Spring Cloud + Eureka",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  },
  {
    "question": "Micrometer를 사용할 때, 사용자 정의 커스텀 메트릭을 생성할 때 사용하는 메서드는?",
    "option1": "Metrics.summary()",
    "option2": "Metrics.custom()",
    "option3": "Metrics.counter()",
    "option4": "Metrics.metric()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  },
  {
    "question": "다음 중 Grafana의 주요 역할은 무엇인가?",
    "option1": "로그 수집",
    "option2": "메트릭 저장",
    "option3": "시각화 대시보드 제공",
    "option4": "애플리케이션 로깅",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  },
  {
    "question": "Spring Boot에서 로거를 구성할 때 추천되는 Kotlin-friendly 로깅 라이브러리는?",
    "option1": "Java Logging",
    "option2": "SLF4J",
    "option3": "Kotlin Logging",
    "option4": "Logrotate",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  },
  {
    "question": "Spring Boot Actuator에서 관리 기능(예: 종료, 로그레벨 변경 등)을 활성화하려면 어떤 설정이 필요한가?",
    "option1": "management.endpoints.web.exposure.include=*",
    "option2": "logging.level=DEBUG",
    "option3": "server.shutdown.enabled=true",
    "option4": "spring.lifecycle.timeout=30s",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  },
  {
    "question": "다음 중 로그 파일의 용량 제한 및 순환(rotate)을 위한 유틸리티는?",
    "option1": "Sentry",
    "option2": "Logrotate",
    "option3": "Actuator",
    "option4": "Micrometer",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)",
    "chapterNum": 5
  }
]