[
  {
    "question": "Vue Test Utils는 어떤 프레임워크의 테스트를 지원하는가?",
    "option1": "React",
    "option2": "Angular",
    "option3": "Vue.js",
    "option4": "Svelte",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils에서 컴포넌트를 마운트하는 기본 함수는?",
    "option1": "render()",
    "option2": "mount()",
    "option3": "create()",
    "option4": "testMount()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils에서 'wrapper'란 무엇을 의미하는가?",
    "option1": "컴포넌트를 감싼 객체",
    "option2": "라우터 인스턴스",
    "option3": "Vuex 스토어",
    "option4": "서버 인스턴스",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils를 사용하기 위해 반드시 필요한 테스트 러너는?",
    "option1": "Jasmine",
    "option2": "Mocha나 Jest",
    "option3": "QUnit",
    "option4": "AVA",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils로 마운트된 컴포넌트를 검사할 수 있는 메서드는?",
    "option1": "check()",
    "option2": "find()",
    "option3": "inspect()",
    "option4": "query()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils를 통해 컴포넌트의 텍스트를 얻을 때 사용하는 메서드는?",
    "option1": "html()",
    "option2": "text()",
    "option3": "get()",
    "option4": "query()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils에서 wrapper.vm은 무엇을 참조하는가?",
    "option1": "뷰 루트 인스턴스",
    "option2": "테스트 파일",
    "option3": "컴포넌트의 Vue 인스턴스",
    "option4": "스토어 인스턴스",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils에서 'setData()'의 역할은?",
    "option1": "props 설정",
    "option2": "data 수동 수정",
    "option3": "컴포넌트 렌더링",
    "option4": "라우팅 변경",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils의 'trigger()' 메서드는 어떤 역할을 하는가?",
    "option1": "컴포넌트 생성",
    "option2": "이벤트 발생",
    "option3": "스토어 연결",
    "option4": "서버 요청",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils를 통해 존재 여부를 확인하는 메서드는?",
    "option1": "exists()",
    "option2": "visible()",
    "option3": "checkExist()",
    "option4": "queryExist()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Vue Test Utils 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vue Test Utils에서 전체 트리를 렌더링하는 함수는?",
    "option1": "shallowMount()",
    "option2": "mount()",
    "option3": "create()",
    "option4": "renderAll()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "Vue Test Utils에서 자식 컴포넌트를 스텁 처리하는 함수는?",
    "option1": "mount()",
    "option2": "shallowMount()",
    "option3": "render()",
    "option4": "stubMount()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "shallowMount()를 사용하면 얻을 수 있는 이점은?",
    "option1": "전체 트리 검증",
    "option2": "렌더링 성능 최적화",
    "option3": "라우터 연결",
    "option4": "스토어 초기화",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "shallowMount와 mount의 가장 큰 차이점은?",
    "option1": "props 처리 방식",
    "option2": "자식 컴포넌트 렌더링 여부",
    "option3": "data 초기화 방식",
    "option4": "router 연결 여부",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "mount()를 사용할 때 예상되는 부작용은?",
    "option1": "테스트 속도 감소",
    "option2": "컴포넌트 삭제",
    "option3": "라우팅 에러",
    "option4": "Vue 인스턴스 중복",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "shallowMount()가 주로 사용되는 테스트 목적은?",
    "option1": "통합 테스트",
    "option2": "단위 테스트",
    "option3": "E2E 테스트",
    "option4": "API 테스트",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "mount()를 사용할 때 자식 컴포넌트까지 렌더링되면 어떤 문제가 생길 수 있는가?",
    "option1": "의존성 없는 테스트 가능",
    "option2": "예상치 못한 실패 발생",
    "option3": "렌더링 속도 향상",
    "option4": "자동 이벤트 바인딩",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "shallowMount() 시 자동으로 대체되는 것은?",
    "option1": "Vuex 모듈",
    "option2": "자식 컴포넌트",
    "option3": "라우터 인스턴스",
    "option4": "Axios 요청",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "mount()의 주요 사용 시나리오는?",
    "option1": "비즈니스 로직 검증",
    "option2": "단일 컴포넌트 유닛 테스트",
    "option3": "전체 통합 시나리오 테스트",
    "option4": "스토어 비활성화",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "shallowMount() 사용 시 주의할 점은?",
    "option1": "스토어 연결 여부",
    "option2": "자식 컴포넌트의 테스트 누락",
    "option3": "라우터 경로 변경",
    "option4": "API 연결 지연",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Mount와 ShallowMount",
    "chapterNum": 2
  },
  {
    "question": "Vue Test Utils에서 버튼 클릭 이벤트를 발생시키는 메서드는?",
    "option1": "click()",
    "option2": "trigger('click')",
    "option3": "emit('click')",
    "option4": "fire('click')",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "input 요소에 값을 설정하고 변경 이벤트를 발생시키는 방법은?",
    "option1": "setValue()",
    "option2": "updateInput()",
    "option3": "changeInput()",
    "option4": "modifyInput()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "컴포넌트의 props를 테스트 중 변경하려면 사용하는 메서드는?",
    "option1": "setProps()",
    "option2": "updateProps()",
    "option3": "changeProps()",
    "option4": "mutateProps()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "Vue Test Utils의 find() 메서드는 무엇을 반환하는가?",
    "option1": "Node 객체",
    "option2": "Wrapper 객체",
    "option3": "Text 객체",
    "option4": "HTML 요소",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "emit() 메서드는 어떤 용도로 사용되는가?",
    "option1": "이벤트 수신",
    "option2": "이벤트 트리거",
    "option3": "HTTP 요청",
    "option4": "Vuex 디스패치",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "컴포넌트가 특정 이벤트를 발생했는지 테스트할 때 사용하는 메서드는?",
    "option1": "emitted()",
    "option2": "triggered()",
    "option3": "sent()",
    "option4": "received()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "Vue 컴포넌트가 emit한 이벤트의 payload를 확인하려면?",
    "option1": "emitted()",
    "option2": "payload()",
    "option3": "findEmits()",
    "option4": "trigger()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "emit된 이벤트 수를 체크하려면?",
    "option1": "emitted().length",
    "option2": "trigger().count",
    "option3": "findEmits().total",
    "option4": "events().size",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "setValue() 메서드를 사용한 후 필요한 추가 작업은?",
    "option1": "trigger('input')",
    "option2": "trigger('change')",
    "option3": "forceUpdate()",
    "option4": "reRender()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "Vue 컴포넌트 상호작용 테스트 시 DOM 변경을 강제로 반영하려면?",
    "option1": "forceUpdate()",
    "option2": "nextTick()",
    "option3": "reRender()",
    "option4": "syncDOM()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "컴포넌트 상호작용 테스트",
    "chapterNum": 3
  },
  {
    "question": "Vue Test Utils에서 비동기 DOM 업데이트를 기다릴 때 사용하는 것은?",
    "option1": "waitFor()",
    "option2": "flushPromises()",
    "option3": "nextTick()",
    "option4": "resolveDOM()",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "Vue 3에서는 비동기 테스트 시 어떤 helper를 권장하는가?",
    "option1": "flushPromises()",
    "option2": "wait()",
    "option3": "waitForEvent()",
    "option4": "asyncTick()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "setProps() 이후 변경 사항이 반영되기 전에 필요한 것은?",
    "option1": "nextTick()",
    "option2": "setTimeout()",
    "option3": "forceUpdate()",
    "option4": "trigger('update')",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "Vue Test Utils에서 이벤트를 수동으로 발생시키려면?",
    "option1": "click()",
    "option2": "emit()",
    "option3": "trigger()",
    "option4": "activate()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "Vue Test Utils에서 input 이벤트를 발생시키는 올바른 방법은?",
    "option1": "trigger('change')",
    "option2": "trigger('input')",
    "option3": "emit('input')",
    "option4": "updateValue()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "비동기 호출이 완료되기 전 테스트가 끝나는 것을 방지하려면?",
    "option1": "await nextTick()",
    "option2": "trigger('complete')",
    "option3": "setImmediate()",
    "option4": "flushDOM()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "Vue Test Utils에서 컴포넌트 이벤트 emit 테스트를 할 때 필요한 메서드는?",
    "option1": "triggerEmit()",
    "option2": "emitted()",
    "option3": "captureEvent()",
    "option4": "emitCheck()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "Promise 기반 로직 테스트 후 DOM 업데이트를 보장하려면?",
    "option1": "nextTick()",
    "option2": "flushPromises()",
    "option3": "resolveAsync()",
    "option4": "trigger('domUpdate')",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "Vue Test Utils에서 DOM 변경을 감지한 후 테스트를 진행하려면?",
    "option1": "await wrapper.update()",
    "option2": "await wrapper.vm.$nextTick()",
    "option3": "await wrapper.flush()",
    "option4": "await wrapper.domFlush()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "컴포넌트 내부의 타이머 관련 테스트를 진행할 때 필요한 것은?",
    "option1": "jest.useTimers()",
    "option2": "flushTimers()",
    "option3": "nextTick()",
    "option4": "triggerTimer()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "비동기 및 이벤트 테스트",
    "chapterNum": 4
  },
  {
    "question": "Vue Test Utils에서 외부 의존성을 대체하는 방법은?",
    "option1": "mock()",
    "option2": "stub()",
    "option3": "replace()",
    "option4": "substitute()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  },
  {
    "question": "Vue Test Utils의 stubs 옵션은 어떤 역할을 하는가?",
    "option1": "자식 컴포넌트 무시",
    "option2": "props 자동 설정",
    "option3": "라우터 연결",
    "option4": "스토어 주입",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  },
  {
    "question": "Vue Test Utils에서 플러그인을 마운트할 때 사용하는 옵션은?",
    "option1": "use()",
    "option2": "plugins",
    "option3": "global.plugins",
    "option4": "setupPlugins()",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  },
  {
    "question": "Vue Test Utils에서 provide/inject를 테스트하려면 사용하는 옵션은?",
    "option1": "provide",
    "option2": "inject",
    "option3": "plugin",
    "option4": "mock",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  },
  {
    "question": "mock 옵션을 사용하면 주로 무엇을 대체하는가?",
    "option1": "라우터",
    "option2": "스토어",
    "option3": "글로벌 프로퍼티",
    "option4": "컴포넌트",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  },
  {
    "question": "Vue Test Utils에서 $router를 Mock으로 대체하려면 사용하는 옵션은?",
    "option1": "mocks: { $router: ... }",
    "option2": "stubs: { RouterLink: ... }",
    "option3": "plugins: [...]",
    "option4": "global.routes",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  },
  {
    "question": "Stub된 컴포넌트는 렌더링 결과에 어떤 영향을 미치는가?",
    "option1": "원본 HTML을 그대로 출력",
    "option2": "간단한 Placeholder만 출력",
    "option3": "전체 트리 삭제",
    "option4": "랜덤 렌더링",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  },
  {
    "question": "Vue Test Utils에서 특정 메서드 호출을 mock하려면 무엇을 사용해야 하는가?",
    "option1": "jest.fn()",
    "option2": "sinon.spy()",
    "option3": "vueMock()",
    "option4": "mockCall()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  },
  {
    "question": "Vuex store를 테스트할 때 actions를 Mock할 수 있는 방법은?",
    "option1": "store.replaceActions()",
    "option2": "mocks 옵션에 주입",
    "option3": "store.mockActions()",
    "option4": "store.stubActions()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  },
  {
    "question": "Vue Test Utils에서 플러그인 주입 없이 테스트하려면 필요한 것은?",
    "option1": "mock plugins",
    "option2": "setupTestPlugin()",
    "option3": "global.plugins 제거",
    "option4": "플러그인 무시 설정",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Mock, Stub, 플러그인 테스트",
    "chapterNum": 5
  }
]