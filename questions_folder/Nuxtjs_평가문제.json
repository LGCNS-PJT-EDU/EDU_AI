[
  {
    "question": "Nuxt.js 프로젝트에서 기본적으로 라우트를 생성하는 폴더는?",
    "option1": "layouts",
    "option2": "store",
    "option3": "pages",
    "option4": "components",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "Nuxt.js는 어떤 프레임워크를 기반으로 만들어졌는가?",
    "option1": "React",
    "option2": "Vue",
    "option3": "Angular",
    "option4": "Svelte",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "Nuxt.js에서 자동으로 생성된 라우터 경로는 어떤 파일 구조를 기반으로 하는가?",
    "option1": "store",
    "option2": "components",
    "option3": "pages",
    "option4": "plugins",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "동적 라우팅을 위한 파일명 형식은?",
    "option1": "[id].vue",
    "option2": "_id.vue",
    "option3": "id.vue",
    "option4": ":id.vue",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "Nuxt.js의 기본 실행 포트는?",
    "option1": "3000",
    "option2": "8080",
    "option3": "5000",
    "option4": "4000",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "Nuxt.js에서 글로벌 설정을 위한 파일은?",
    "option1": "nuxt.config.js",
    "option2": "settings.js",
    "option3": "app.config.js",
    "option4": "vue.config.js",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "Nuxt.js에서 미들웨어를 사용하는 주요 목적은?",
    "option1": "서버 리셋",
    "option2": "라우트 접근 제어",
    "option3": "라우터 초기화",
    "option4": "API 생성",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "nuxt generate 명령은 어떤 목적을 위해 사용하는가?",
    "option1": "개발 서버 실행",
    "option2": "정적 사이트 생성",
    "option3": "스토어 초기화",
    "option4": "프로젝트 테스트",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "Nuxt.js 프로젝트에서 플러그인을 등록하는 폴더는?",
    "option1": "middleware",
    "option2": "plugins",
    "option3": "layouts",
    "option4": "static",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "Nuxt.js에서 SSR이란?",
    "option1": "Single Static Route",
    "option2": "Server-Side Rendering",
    "option3": "State Store Route",
    "option4": "Server Session Request",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Nuxt.js 기본 구조 및 라우팅",
    "chapterNum": 1
  },
  {
    "question": "Nuxt.js에서 전체 페이지에 공통으로 적용되는 레이아웃은?",
    "option1": "default.vue",
    "option2": "global.vue",
    "option3": "main.vue",
    "option4": "shared.vue",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "페이지 파일은 어떤 폴더 안에 위치해야 Nuxt.js에서 인식하는가?",
    "option1": "components",
    "option2": "pages",
    "option3": "layouts",
    "option4": "store",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "Nuxt.js 페이지에서 layout을 지정하려면 사용하는 속성은?",
    "option1": "template",
    "option2": "layout",
    "option3": "useLayout",
    "option4": "wrapper",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "레이아웃 파일은 어떤 폴더에 위치하는가?",
    "option1": "layouts",
    "option2": "pages",
    "option3": "views",
    "option4": "static",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "<nuxt/> 컴포넌트의 역할은?",
    "option1": "라우팅 처리",
    "option2": "페이지 전환 트리거",
    "option3": "페이지 내용 렌더링",
    "option4": "스토어 접근",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "페이지 내에서 transition을 적용할 때 사용하는 키워드는?",
    "option1": "pageTransition",
    "option2": "animation",
    "option3": "layoutAnimation",
    "option4": "routerTransition",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "레이아웃 변경이 필요한 경우 사용하는 hook은?",
    "option1": "beforeCreate",
    "option2": "layout()",
    "option3": "setup()",
    "option4": "useLayout()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "Nuxt.js에서 layout 속성은 어디에 정의되는가?",
    "option1": "components",
    "option2": "script",
    "option3": "data",
    "option4": "template",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "Nuxt.js에서 동적 레이아웃 전환은 어떻게 처리되는가?",
    "option1": "computed 속성",
    "option2": "layout() 함수",
    "option3": "transition 속성",
    "option4": "nuxt.config.js",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "레이아웃을 조건부로 바꾸려면 무엇을 사용해야 하는가?",
    "option1": "computed layout",
    "option2": "layout() 함수 반환",
    "option3": "watchLayout()",
    "option4": "layoutTransition",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "페이지 및 레이아웃",
    "chapterNum": 2
  },
  {
    "question": "Nuxt.js에서 상태 관리를 위해 사용하는 기본 라이브러리는?",
    "option1": "Pinia",
    "option2": "Redux",
    "option3": "Vuex",
    "option4": "Zustand",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "Vuex 스토어 파일은 어떤 폴더에 위치해야 Nuxt가 인식하는가?",
    "option1": "store",
    "option2": "pages",
    "option3": "layouts",
    "option4": "components",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "Vuex에서 상태 변경을 위한 함수는?",
    "option1": "getter",
    "option2": "mutation",
    "option3": "action",
    "option4": "state",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "Vuex의 상태를 가져오기 위한 헬퍼 함수는?",
    "option1": "mapActions",
    "option2": "mapMutations",
    "option3": "mapState",
    "option4": "useState",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "Vuex에서 비동기 처리를 담당하는 메서드는?",
    "option1": "mutations",
    "option2": "actions",
    "option3": "state",
    "option4": "store",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "Vuex의 getters의 주요 목적은?",
    "option1": "상태 변경",
    "option2": "비동기 로직",
    "option3": "상태 기반 계산",
    "option4": "모듈 등록",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "Nuxt.js에서 store를 모듈 단위로 나누려면 어떤 설정이 필요한가?",
    "option1": "state: true",
    "option2": "namespaced: true",
    "option3": "modular: true",
    "option4": "separate: true",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "store/index.js에서 반드시 export 되어야 하는 것은?",
    "option1": "getters",
    "option2": "default function",
    "option3": "mutations",
    "option4": "modules",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "Vuex의 state를 사용하는 방식은?",
    "option1": "this.$store.dispatch()",
    "option2": "this.$store.state.key",
    "option3": "this.$store.commit()",
    "option4": "this.$store.inject()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "Nuxt에서 store를 동적으로 생성하려면 어떤 속성을 설정해야 하는가?",
    "option1": "dynamic: true",
    "option2": "storeMode: 'dynamic'",
    "option3": "export default () => new Vuex.Store()",
    "option4": "useDynamic()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "상태 관리와 Vuex",
    "chapterNum": 3
  },
  {
    "question": "Nuxt.js에서 asyncData는 어떤 시점에 실행되는가?",
    "option1": "클라이언트 렌더링 후",
    "option2": "컴포넌트 생성 후",
    "option3": "서버 또는 클라이언트 렌더링 전에",
    "option4": "라우터 변경 시",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "asyncData는 어떤 타입의 값을 반환해야 하는가?",
    "option1": "Promise",
    "option2": "Array",
    "option3": "Function",
    "option4": "Object",
    "answerIndex": 4,
    "difficulty": "하",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "asyncData와 fetch의 차이점 중 옳은 것은?",
    "option1": "둘 다 컴포넌트 메서드로 정의된다",
    "option2": "asyncData는 setup에서만 작동한다",
    "option3": "fetch는 this 접근이 가능하다",
    "option4": "fetch는 SSR에서 작동하지 않는다",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "Nuxt.js에서 $axios는 어떤 역할을 하는가?",
    "option1": "뷰 전환",
    "option2": "API 호출",
    "option3": "라우터 설정",
    "option4": "스토어 초기화",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "fetch() 함수는 어떤 시점에 호출되는가?",
    "option1": "라우터 변경 시",
    "option2": "컴포넌트 mounted 후",
    "option3": "페이지 진입 시",
    "option4": "DOM 렌더링 후",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "서버에서만 asyncData를 호출하게 하려면 어떻게 설정하는가?",
    "option1": "ssrOnly: true",
    "option2": "serverOnly: true",
    "option3": "context.ssr = true",
    "option4": "process.server 조건문 사용",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "asyncData에서 this 키워드를 사용할 수 없는 이유는?",
    "option1": "비동기라서",
    "option2": "setup 훅 외부라서",
    "option3": "context 기반 함수이기 때문",
    "option4": "Vue 3 미지원",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "fetch와 asyncData를 함께 사용할 수 있는가?",
    "option1": "불가능하다",
    "option2": "가능하지만 권장되지 않는다",
    "option3": "가능하다",
    "option4": "Vuex를 사용할 경우만 가능",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "API 요청을 공통으로 처리하기 위해 사용하는 Nuxt 모듈은?",
    "option1": "@nuxt/http",
    "option2": "@nuxt/axios",
    "option3": "@nuxt/request",
    "option4": "@nuxt/fetch",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "Nuxt에서 context를 활용하는 함수가 아닌 것은?",
    "option1": "asyncData",
    "option2": "fetch",
    "option3": "created",
    "option4": "middleware",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "비동기 데이터 처리와 API 연동",
    "chapterNum": 4
  },
  {
    "question": "Nuxt.js에서 환경 변수는 어떤 파일에 설정하는가?",
    "option1": ".env",
    "option2": "nuxt.config.js",
    "option3": "package.json",
    "option4": "store/index.js",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  },
  {
    "question": "SSR을 비활성화하려면 nuxt.config.js에서 어떤 속성을 설정해야 하는가?",
    "option1": "ssr: false",
    "option2": "mode: 'spa'",
    "option3": "static: true",
    "option4": "target: 'spa'",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  },
  {
    "question": "정적 사이트 생성을 위한 Nuxt 명령은?",
    "option1": "nuxt run",
    "option2": "nuxt build",
    "option3": "nuxt export",
    "option4": "nuxt generate",
    "answerIndex": 4,
    "difficulty": "하",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  },
  {
    "question": "nuxt.config.js에서 SEO를 위한 설정은 어디에 정의되는가?",
    "option1": "meta",
    "option2": "head",
    "option3": "seo",
    "option4": "titleTemplate",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  },
  {
    "question": "Nuxt에서 외부 모듈을 추가할 때 사용하는 속성은?",
    "option1": "modules",
    "option2": "plugins",
    "option3": "imports",
    "option4": "include",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  },
  {
    "question": "generate로 생성된 파일의 기본 디렉토리는?",
    "option1": "dist",
    "option2": "build",
    "option3": "out",
    "option4": ".nuxt",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  },
  {
    "question": "Nuxt에서 미들웨어로 로그인 여부를 검사할 때 위치는?",
    "option1": "layouts",
    "option2": "middleware",
    "option3": "pages",
    "option4": "static",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  },
  {
    "question": "라우팅 설정을 커스터마이징할 때 사용하는 옵션은?",
    "option1": "router.extendRoutes",
    "option2": "route.config",
    "option3": "customRoutes",
    "option4": "routes.options",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  },
  {
    "question": "정적 파일을 제공하는 Nuxt 디렉토리는?",
    "option1": "assets",
    "option2": "components",
    "option3": "static",
    "option4": "layouts",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  },
  {
    "question": "Nuxt.js를 Vercel에 배포할 때 사용하는 설정 파일은?",
    "option1": ".vercel.json",
    "option2": "vercel.config.js",
    "option3": "nuxt.config.js",
    "option4": "vercel.json",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "Nuxt.js 고급 기능과 배포",
    "chapterNum": 5
  }
]