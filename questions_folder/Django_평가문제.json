[
  {
    "question": "Django에서 새로운 프로젝트를 시작하는 명령어는?",
    "option1": "python createproject mysite",
    "option2": "django-admin startproject mysite",
    "option3": "django startproject mysite",
    "option4": "django-admin create mysite",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Django 기초 개념",
    "chapterNum": 1
  },
  {
    "question": "Django에서 앱을 생성할 때 사용하는 명령어는?",
    "option1": "django startapp blog",
    "option2": "python manage.py initapp blog",
    "option3": "python manage.py startapp blog",
    "option4": "django-admin createapp blog",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Django 기초 개념",
    "chapterNum": 1
  },
  {
    "question": "Django에서 URL과 뷰 함수를 연결할 때 사용하는 함수는?",
    "option1": "include()",
    "option2": "render()",
    "option3": "connect()",
    "option4": "path()",
    "answerIndex": 4,
    "difficulty": "하",
    "chapterName": "URL 및 뷰 처리",
    "chapterNum": 2
  },
  {
    "question": "뷰 함수에서 HTTP 응답을 반환하기 위해 사용하는 함수는?",
    "option1": "HttpResponse()",
    "option2": "response()",
    "option3": "returnView()",
    "option4": "HttpRender()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "URL 및 뷰 처리",
    "chapterNum": 2
  },
  {
    "question": "템플릿에서 정적 파일(css/js 등)을 로드하기 위해 템플릿 상단에 사용하는 태그는?",
    "option1": "{% include static %}",
    "option2": "{{ static load }}",
    "option3": "{% load static %}",
    "option4": "{% static load %}",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "템플릿과 정적 파일",
    "chapterNum": 3
  },
  {
    "question": "템플릿에서 context로 넘긴 'username'을 출력하려면 어떻게 해야 하나?",
    "option1": "{% username %}",
    "option2": "{{ username }}",
    "option3": "<%= username %>",
    "option4": "${ username }",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "템플릿과 정적 파일",
    "chapterNum": 3
  },
  {
    "question": "Django 모델에서 기본키(primary key)를 명시하지 않으면 자동으로 생성되는 필드는?",
    "option1": "AutoIDField",
    "option2": "models.IDField()",
    "option3": "models.AutoField(primary_key=True)",
    "option4": "models.IntegerField(auto=True)",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "모델과 ORM",
    "chapterNum": 4
  },
  {
    "question": "ORM에서 모델 인스턴스를 저장하기 위해 사용하는 메서드는?",
    "option1": "update()",
    "option2": "persist()",
    "option3": "commit()",
    "option4": "save()",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "모델과 ORM",
    "chapterNum": 4
  },
  {
    "question": "Django에서 사용자의 로그인 상태를 확인할 수 있는 내장 변수는?",
    "option1": "request.login_status",
    "option2": "request.authenticated",
    "option3": "request.user.is_authenticated",
    "option4": "user.session.active",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "폼에서 필드 자동 유효성 검사 기능이 제공되는 클래스는?",
    "option1": "forms.BaseForm",
    "option2": "forms.ModelForm",
    "option3": "forms.FormGroup",
    "option4": "forms.SimpleForm",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "Django 프로젝트에서 설정 파일이 위치한 기본 디렉토리는?",
    "option1": "settings/",
    "option2": "mysite/settings/",
    "option3": "config/",
    "option4": "project/",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Django 기초 개념",
    "chapterNum": 1
  },
  {
    "question": "Django에서 디버그 모드를 설정하는 변수는?",
    "option1": "DEBUG_MODE",
    "option2": "IS_DEBUG",
    "option3": "DEBUG",
    "option4": "DEV_MODE",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Django 기초 개념",
    "chapterNum": 1
  },
  {
    "question": "URLconf에서 다른 URLconf 모듈을 포함시킬 때 사용하는 함수는?",
    "option1": "redirect()",
    "option2": "path()",
    "option3": "include()",
    "option4": "add_url()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "URL 및 뷰 처리",
    "chapterNum": 2
  },
  {
    "question": "Django에서 템플릿 파일 기본 확장자는?",
    "option1": ".tpl",
    "option2": ".html",
    "option3": ".django",
    "option4": ".template",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "템플릿과 정적 파일",
    "chapterNum": 3
  },
  {
    "question": "템플릿에서 if 조건문을 사용할 때의 구문은?",
    "option1": "{% if username != '' %}",
    "option2": "{{ if username }}",
    "option3": "{% if username %}",
    "option4": "<% if username %>",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "템플릿과 정적 파일",
    "chapterNum": 3
  },
  {
    "question": "Django 모델에서 하나의 모델이 다른 모델과 1:N 관계를 가질 때 사용하는 필드는?",
    "option1": "OneToOneField",
    "option2": "ManyToManyField",
    "option3": "ForeignKey",
    "option4": "RelationField",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "모델과 ORM",
    "chapterNum": 4
  },
  {
    "question": "모델 클래스에 대한 DB 테이블 이름을 지정할 때 사용하는 내부 클래스는?",
    "option1": "Class Meta",
    "option2": "ModelOptions",
    "option3": "Meta",
    "option4": "Options",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "모델과 ORM",
    "chapterNum": 4
  },
  {
    "question": "로그인한 사용자의 정보를 뷰 함수에서 가져올 때 사용하는 객체는?",
    "option1": "request.auth",
    "option2": "request.user",
    "option3": "user.session",
    "option4": "auth.current_user",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "Django의 폼 시스템에서 사용자 입력 데이터를 검증하려면 어떤 메서드를 호출해야 하나?",
    "option1": "is_valid()",
    "option2": "validate()",
    "option3": "check()",
    "option4": "form_validate()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "폼의 필드를 커스터마이징할 때 사용하는 속성 중 하나는?",
    "option1": "attrs",
    "option2": "fields",
    "option3": "widgets",
    "option4": "style",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "Django REST framework를 설치하기 위한 pip 명령어는?",
    "option1": "pip install djangorestframework",
    "option2": "pip install django-rest",
    "option3": "pip install django-api",
    "option4": "pip install restframework",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF에서 APIView 클래스를 상속받아 뷰를 작성할 때 사용되는 모듈은?",
    "option1": "django.views.generic",
    "option2": "rest_framework.views",
    "option3": "rest_framework.generics",
    "option4": "django.api.views",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF에서 직렬화에 사용되는 클래스는?",
    "option1": "FormSerializer",
    "option2": "ModelForm",
    "option3": "ModelSerializer",
    "option4": "DataSerializer",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "APIView에서 GET 요청을 처리하는 메서드는?",
    "option1": "get_request()",
    "option2": "get()",
    "option3": "retrieve()",
    "option4": "handle_get()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF에서 다양한 응답 형식을 처리하는 클래스는?",
    "option1": "HttpResponse",
    "option2": "JsonResponse",
    "option3": "Response",
    "option4": "APIResponse",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "Serializer 클래스에서 필드를 정의할 때 사용하는 모듈은?",
    "option1": "rest_framework.models",
    "option2": "rest_framework.fields",
    "option3": "rest_framework.serializers",
    "option4": "django.forms.fields",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF에서 클래스 기반 뷰를 더 간단히 작성할 수 있게 도와주는 뷰는?",
    "option1": "GenericAPIView",
    "option2": "APIViewLite",
    "option3": "BaseAPIView",
    "option4": "AutoView",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF의 ViewSet을 URL에 연결하기 위해 사용하는 객체는?",
    "option1": "UrlDispatcher",
    "option2": "Router",
    "option3": "PathBinder",
    "option4": "ApiConnector",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "ModelSerializer를 사용할 때 모델과 필드를 지정하는 내부 클래스는?",
    "option1": "SerializerMeta",
    "option2": "Meta",
    "option3": "Options",
    "option4": "Config",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF에서 인증(authentication)을 설정하기 위한 설정 키는?",
    "option1": "AUTH_CLASSES",
    "option2": "DRF_AUTH",
    "option3": "DEFAULT_AUTH_CLASSES",
    "option4": "DEFAULT_AUTHENTICATION_CLASSES",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "Django에서 settings.py에 앱을 등록할 때 사용하는 설정 항목은?",
    "option1": "APP_LIST",
    "option2": "INSTALLED_APPS",
    "option3": "ACTIVE_APPS",
    "option4": "REGISTERED_APPS",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Django 기초 개념",
    "chapterNum": 1
  },
  {
    "question": "Django에서 URLconf 모듈을 연결할 때 사용하는 함수는?",
    "option1": "connect()",
    "option2": "url()",
    "option3": "include()",
    "option4": "redirect()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "URL 및 뷰 처리",
    "chapterNum": 2
  },
  {
    "question": "템플릿에서 조건문을 사용할 때 올바른 구문은?",
    "option1": "{% if user.is_authenticated %} ... {% endif %}",
    "option2": "{{ if user.is_authenticated }} ... {{ endif }}",
    "option3": "{% if user.is_authenticated %} ... {{ endif }}",
    "option4": "{% if user.is_authenticated %} ... {% end %}",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "템플릿과 정적 파일",
    "chapterNum": 3
  },
  {
    "question": "Django 모델에서 필드에 고유값 제약 조건을 주려면?",
    "option1": "unique=True",
    "option2": "primary_key=True",
    "option3": "null=False",
    "option4": "indexed=True",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "모델과 ORM",
    "chapterNum": 4
  },
  {
    "question": "Django의 User 모델에 password를 설정할 때 사용하는 메서드는?",
    "option1": "set_password()",
    "option2": "create_password()",
    "option3": "hash_password()",
    "option4": "set_encrypted_password()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF에서 `@api_view(['GET'])` 데코레이터는 어떤 종류의 뷰에 사용되는가?",
    "option1": "클래스 기반 뷰",
    "option2": "제너릭 뷰",
    "option3": "함수형 뷰",
    "option4": "ViewSet",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF에서 status 코드로 HTTP 404를 반환할 때 사용하는 상수는?",
    "option1": "status.HTTP_404_NOT_FOUND",
    "option2": "status.NOT_FOUND",
    "option3": "HTTP.NOT_FOUND",
    "option4": "status.HTTP_NOT_FOUND",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF ViewSet에서 리스트 조회 기능을 위한 메서드는?",
    "option1": "retrieve()",
    "option2": "get()",
    "option3": "list()",
    "option4": "get_all()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "Django에서 모델을 생성한 후 데이터베이스에 반영하려면 어떤 명령어를 사용해야 하는가?",
    "option1": "python manage.py makemigrations → migrate",
    "option2": "python manage.py db_create",
    "option3": "python manage.py dbsync",
    "option4": "python manage.py migrate_only",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "모델과 ORM",
    "chapterNum": 4
  },
  {
    "question": "Django의 `get_object_or_404()` 함수의 주요 목적은?",
    "option1": "객체를 생성하고 저장한다",
    "option2": "404 응답 없이 객체를 가져온다",
    "option3": "객체가 없으면 404 오류를 반환한다",
    "option4": "모든 객체를 조회한다",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "URL 및 뷰 처리",
    "chapterNum": 2
  },
  {
    "question": "템플릿에서 HTML을 안전하게 출력하려면 어떤 필터를 사용할 수 있는가?",
    "option1": "|escape",
    "option2": "|safe",
    "option3": "|html",
    "option4": "|print",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "템플릿과 정적 파일",
    "chapterNum": 3
  },
  {
    "question": "장고에서 `ModelForm`의 주요 목적은?",
    "option1": "HTML 직접 작성",
    "option2": "모델을 자동으로 저장하지 않음",
    "option3": "모델 기반 폼 자동 생성",
    "option4": "폼 유효성 검사 생략",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "Django REST Framework에서 serializer의 역할은?",
    "option1": "HTML 템플릿을 렌더링한다",
    "option2": "클래스 기반 뷰를 관리한다",
    "option3": "데이터를 JSON 등으로 변환한다",
    "option4": "url 패턴을 등록한다",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "DRF에서 특정 필드를 읽기 전용으로 만들고 싶을 때 사용하는 옵션은?",
    "option1": "editable=False",
    "option2": "readonly=True",
    "option3": "read_only=True",
    "option4": "non_writable=True",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "Django에서 QuerySet의 `filter()` 메서드는 어떤 역할을 하는가?",
    "option1": "모든 데이터를 가져온다",
    "option2": "지정한 조건에 맞는 데이터를 조회한다",
    "option3": "데이터를 삭제한다",
    "option4": "조건 없이 정렬한다",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "모델과 ORM",
    "chapterNum": 4
  },
  {
    "question": "DRF에서 `serializer.is_valid()` 호출 후 접근 가능한 속성은?",
    "option1": "serializer.cleaned_data",
    "option2": "serializer.validated_data",
    "option3": "serializer.cleaned_fields",
    "option4": "serializer.form_data",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "DRF(REST API)",
    "chapterNum": 5
  },
  {
    "question": "Django에서 프로젝트를 생성하면 자동으로 생성되는 파일 중, 명령어 관리를 담당하는 파일은?",
    "option1": "apps.py",
    "option2": "wsgi.py",
    "option3": "manage.py",
    "option4": "urls.py",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Django 기초 개념",
    "chapterNum": 1
  },
  {
    "question": "Django에서 특정 URL 요청이 어떤 view 함수로 연결될지를 지정할 때 사용하는 함수는?",
    "option1": "include()",
    "option2": "render()",
    "option3": "path()",
    "option4": "urljoin()",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "URL 및 뷰 처리",
    "chapterNum": 2
  },
  {
    "question": "Django 템플릿에서 변수를 출력하기 위해 사용하는 구문은?",
    "option1": "{% variable %}",
    "option2": "{{ variable }}",
    "option3": "[[ variable ]]",
    "option4": "( variable )",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "템플릿과 정적 파일",
    "chapterNum": 3
  },
  {
    "question": "Django 모델 클래스에 __str__ 메서드를 정의하는 이유는?",
    "option1": "객체 생성 시 자동으로 호출되도록 하기 위해",
    "option2": "모델 객체를 문자열로 보기 좋게 표현하기 위해",
    "option3": "데이터베이스 테이블 이름을 지정하기 위해",
    "option4": "모델 필드에 기본값을 설정하기 위해",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "모델과 ORM",
    "chapterNum": 4
  }
]