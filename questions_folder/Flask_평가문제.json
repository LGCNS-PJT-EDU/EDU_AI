[
  {
    "question": "Flask에서 애플리케이션을 생성할 때 사용되는 객체는?",
    "option1": "app",
    "option2": "FlaskApp",
    "option3": "FlaskInstance",
    "option4": "application",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Flask 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Flask에서 특정 URL로 요청을 받을 수 있게 하는 데코레이터는 무엇인가?",
    "option1": "@app.route()",
    "option2": "@url.route()",
    "option3": "@app.view()",
    "option4": "@request.route()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 뷰 함수가 반환하는 기본값은 무엇인가?",
    "option1": "HTML",
    "option2": "JSON",
    "option3": "Response 객체",
    "option4": "String",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Jinja2 템플릿에서 상속을 사용하기 위한 구문은 무엇인가?",
    "option1": "{% include 'base.html' %}",
    "option2": "{% extends 'base.html' %}",
    "option3": "{% block content %}",
    "option4": "{% inherit 'base.html' %}",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "템플릿과 Jinja2",
    "chapterNum": 3
  },
  {
    "question": "Flask-SQLAlchemy에서 모델 간 관계를 설정할 때 사용하는 키워드는?",
    "option1": "ForeignKey",
    "option2": "RelationalKey",
    "option3": "Relationship",
    "option4": "KeyRelation",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask-SQLAlchemy 및 CRUD",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 폼 데이터를 처리할 때 사용하는 `POST` 방식의 데이터를 가져오는 방법은 무엇인가?",
    "option1": "request.form",
    "option2": "request.body",
    "option3": "request.json",
    "option4": "request.args",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask 애플리케이션에서 세션을 사용하기 위해 필요한 객체는 무엇인가?",
    "option1": "session",
    "option2": "cookies",
    "option3": "request",
    "option4": "state",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask-SQLAlchemy 및 CRUD",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 SQLAlchemy를 사용하여 CRUD 기능을 구현할 때, 데이터를 추가하기 위한 메서드는 무엇인가?",
    "option1": "db.add()",
    "option2": "db.insert()",
    "option3": "db.create()",
    "option4": "db.session.add()",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "Flask-SQLAlchemy 및 CRUD",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 서버를 로컬 환경에서 디버그 모드로 실행할 때 사용하는 코드는 무엇인가?",
    "option1": "app.run(debug=True)",
    "option2": "app.run(debug=False)",
    "option3": "flask run --debug",
    "option4": "run_server(debug=True)",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 CORS(Cross-Origin Resource Sharing) 문제를 해결하기 위한 확장 모듈은 무엇인가?",
    "option1": "Flask-Session",
    "option2": "Flask-CORS",
    "option3": "Flask-SQLAlchemy",
    "option4": "Flask-Security",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 REST API를 개발하기 위해 사용하는 확장 모듈은 무엇인가?",
    "option1": "Flask-RESTful",
    "option2": "Flask-API",
    "option3": "Flask-REST",
    "option4": "Flask-Json",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 HTML 폼을 처리할 때, 사용자가 입력한 데이터를 확인하는 방법은 무엇인가?",
    "option1": "request.form.get('key')",
    "option2": "request.json.get('key')",
    "option3": "request.data('key')",
    "option4": "request.args('key')",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 URL 매핑을 동적으로 처리하기 위한 방법은 무엇인가?",
    "option1": "app.route('/user/<username>')",
    "option2": "app.route('/user/:username')",
    "option3": "app.route('/user/{username}')",
    "option4": "app.route('/user?username')",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 사용자의 세션을 종료하는 함수는 무엇인가?",
    "option1": "session.remove()",
    "option2": "session.clear()",
    "option3": "session.pop()",
    "option4": "session.end()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 Jinja2 템플릿에서 조건문을 사용하는 구문은 무엇인가?",
    "option1": "{% if condition %} ... {% endif %}",
    "option2": "{% if condition == true %} ... {% end_if %}",
    "option3": "{% condition if %} ... {% endif_condition %}",
    "option4": "{% check condition %} ... {% end_check %}",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "템플릿과 Jinja2",
    "chapterNum": 3
  },
  {
    "question": "Flask에서 `url_for()` 함수는 무엇을 위해 사용되는가?",
    "option1": "URL 경로를 동적으로 생성하는 데 사용된다.",
    "option2": "HTTP 요청을 보낼 때 URL을 생성한다.",
    "option3": "서버 주소를 반환하는 함수이다.",
    "option4": "HTTP 응답을 생성하는 함수이다.",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 데이터베이스 모델을 정의할 때 사용하는 ORM 클래스는 무엇인가?",
    "option1": "db.Model",
    "option2": "db.Schema",
    "option3": "db.Entity",
    "option4": "db.Table",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask-SQLAlchemy 및 CRUD",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 사용자가 요청을 보낼 때, 요청한 데이터를 JSON 형식으로 받기 위해 사용하는 메서드는 무엇인가?",
    "option1": "request.form",
    "option2": "request.args",
    "option3": "request.json",
    "option4": "request.body",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 `Flask-SQLAlchemy`를 사용하여 모델 간 관계를 설정할 때 `backref`는 무엇을 의미하는가?",
    "option1": "한 방향의 관계를 쉽게 쿼리할 수 있도록 해준다.",
    "option2": "양방향 관계를 쉽게 쿼리할 수 있도록 해준다.",
    "option3": "ForeignKey를 설정하는 데 사용된다.",
    "option4": "정렬 조건을 추가하는 데 사용된다.",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Flask-SQLAlchemy 및 CRUD",
    "chapterNum": 4
  },
  {
    "question": "Flask 애플리케이션을 Docker로 컨테이너화하기 위해 사용할 수 있는 기본적인 파일은 무엇인가?",
    "option1": "Dockerfile",
    "option2": "flaskfile",
    "option3": "docker-compose.yml",
    "option4": "app.yaml",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 `app.run(debug=True)`를 사용하면 어떤 기능이 활성화되는가?",
    "option1": "자동으로 코드 변경 시 서버가 재시작된다.",
    "option2": "디버깅 정보가 브라우저에 출력된다.",
    "option3": "코드 에러 발생 시 사용자에게 오류 메시지를 제공한다.",
    "option4": "배포 모드로 실행된다.",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 `@app.before_request()` 데코레이터는 무엇을 위해 사용되는가?",
    "option1": "응답 전후에 추가 작업을 실행한다.",
    "option2": "HTTP 요청이 처리되기 전에 실행된다.",
    "option3": "라우팅 전에 실행되어 URL 경로를 변경한다.",
    "option4": "세션 종료 후 로그아웃 처리를 한다.",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 REST API 응답으로 JSON 데이터를 보내기 위해 사용하는 함수는 무엇인가?",
    "option1": "jsonify()",
    "option2": "render_template()",
    "option3": "send_json()",
    "option4": "make_response()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 JWT(Json Web Token) 인증을 구현할 때 사용하는 확장 모듈은 무엇인가?",
    "option1": "Flask-JWT-Extended",
    "option2": "Flask-Security",
    "option3": "Flask-Auth",
    "option4": "Flask-OAuth",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 `url_for()` 함수는 어떤 데이터를 반환하는가?",
    "option1": "HTTP 요청을 위한 URL 경로",
    "option2": "서버 주소와 경로를 포함한 URL",
    "option3": "요청의 쿼리 문자열",
    "option4": "URL에 대한 인증 토큰",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 웹 페이지 리다이렉션을 구현할 때 사용하는 함수는 무엇인가?",
    "option1": "redirect()",
    "option2": "send_redirect()",
    "option3": "move_to()",
    "option4": "url_redirect()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 `Flask-SQLAlchemy`를 사용할 때 모델 정의 시 사용하는 필드 유형 중 날짜를 처리하는 필드는 무엇인가?",
    "option1": "db.DateTime",
    "option2": "db.Date",
    "option3": "db.Timestamp",
    "option4": "db.Time",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask-SQLAlchemy 및 CRUD",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 클라이언트로부터 보내는 쿠키를 설정하려면 어떤 함수를 사용해야 하는가?",
    "option1": "response.set_cookie()",
    "option2": "request.set_cookie()",
    "option3": "session.set_cookie()",
    "option4": "make_response.set_cookie()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 세션 데이터를 서버에 저장하려면 어떤 방식이 기본적으로 사용되는가?",
    "option1": "서버의 파일 시스템에 저장",
    "option2": "서버의 메모리에 저장",
    "option3": "클라이언트의 쿠키에 저장",
    "option4": "데이터베이스에 저장",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 여러 기능을 모듈화하여 관리할 때 사용하는 구조는 무엇인가?",
    "option1": "Blueprint",
    "option2": "Module",
    "option3": "Package",
    "option4": "Component",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "템플릿과 Jinja2",
    "chapterNum": 3
  },
  {
    "question": "Flask에서 `Flask-SQLAlchemy`를 사용하여 모델을 정의할 때, 기본적으로 데이터베이스 테이블의 이름은 무엇으로 설정되는가?",
    "option1": "클래스 이름의 소문자 형태",
    "option2": "클래스 이름의 대문자 형태",
    "option3": "설정 파일에 정의된 이름",
    "option4": "자동으로 생성된 UUID",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask-SQLAlchemy 및 CRUD",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 특정 뷰 함수가 호출될 때, `request.args`와 `request.form`의 차이는 무엇인가?",
    "option1": "`request.args`는 URL 쿼리 파라미터, `request.form`은 HTML 폼 데이터",
    "option2": "`request.args`는 헤더에 포함된 데이터, `request.form`은 서버에서 생성된 데이터",
    "option3": "`request.args`는 JSON 형식의 데이터, `request.form`은 텍스트 형식의 데이터",
    "option4": "`request.args`와 `request.form`은 동일한 데이터를 처리한다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 `Flask-WTF`를 사용하여 폼 유효성 검사를 처리할 때, 필수 항목을 지정하려면 어떤 옵션을 사용해야 하는가?",
    "option1": "validators=[DataRequired()]",
    "option2": "required=True",
    "option3": "mandatory=True",
    "option4": "field_required=True",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 `Blueprint`를 사용하여 애플리케이션을 구조화하는 이유는 무엇인가?",
    "option1": "코드의 재사용과 모듈화를 위해",
    "option2": "앱을 디버깅할 때 속도 향상을 위해",
    "option3": "보안을 강화하기 위해",
    "option4": "애플리케이션을 다국어 지원하도록 설정하기 위해",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "템플릿과 Jinja2",
    "chapterNum": 3
  },
  {
    "question": "Flask에서 `Flask-Login`을 사용하여 세션을 관리할 때, 사용자의 로그인 상태를 확인하는 함수는 무엇인가?",
    "option1": "current_user.is_authenticated",
    "option2": "session.is_logged_in",
    "option3": "user.check_session()",
    "option4": "flask_login.check_login()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 애플리케이션을 배포할 때, Nginx와 gunicorn을 사용할 때 gunicorn의 역할은 무엇인가?",
    "option1": "애플리케이션을 실행하고 요청을 처리한다.",
    "option2": "정적 파일을 제공한다.",
    "option3": "애플리케이션의 데이터베이스를 관리한다.",
    "option4": "요청을 Nginx로 라우팅한다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 `@app.errorhandler(404)` 데코레이터를 사용하면 어떤 일이 일어나는가?",
    "option1": "404 오류가 발생했을 때 호출되는 함수가 정의된다.",
    "option2": "404 오류가 발생하면 자동으로 로그인 페이지로 리다이렉트된다.",
    "option3": "서버가 종료된다.",
    "option4": "404 오류가 발생했을 때 응답을 반환한다.",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 `app.config.from_object()` 메서드는 무엇을 위해 사용되는가?",
    "option1": "애플리케이션 설정을 외부 객체에서 로드하기 위해",
    "option2": "애플리케이션의 라우팅을 설정하기 위해",
    "option3": "애플리케이션의 템플릿 경로를 설정하기 위해",
    "option4": "애플리케이션의 데이터베이스 연결을 설정하기 위해",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "템플릿과 Jinja2",
    "chapterNum": 3
  },
  {
    "question": "Flask에서 `make_response()` 함수는 무엇을 반환하는가?",
    "option1": "응답 객체(Response object)",
    "option2": "HTML 템플릿을 렌더링한 문자열",
    "option3": "서버의 로그 객체",
    "option4": "클라이언트의 요청 객체",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 `flask_sqlalchemy.SQLAlchemy` 객체를 사용하여 데이터베이스 모델을 정의할 때, 관계 설정을 할 수 있는 필드는 무엇인가?",
    "option1": "relationship",
    "option2": "link",
    "option3": "connect",
    "option4": "assoc",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask-SQLAlchemy 및 CRUD",
    "chapterNum": 4
  },
  {
    "question": "Flask에서 `url_for()` 함수는 어떤 용도로 사용되는가?",
    "option1": "URL을 생성하여 리다이렉트하는 데 사용된다.",
    "option2": "현재 URL을 반환하는 데 사용된다.",
    "option3": "HTML 폼 데이터를 서버로 전송하는 데 사용된다.",
    "option4": "템플릿을 렌더링하는 데 사용된다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 `render_template()` 함수는 무엇을 하는가?",
    "option1": "템플릿 파일을 읽어 HTML 응답을 반환한다.",
    "option2": "HTML을 서버에 전송한다.",
    "option3": "사용자 입력 데이터를 필터링한다.",
    "option4": "HTML 폼을 처리한다.",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "템플릿과 Jinja2",
    "chapterNum": 3
  },
  {
    "question": "Flask에서 `app.run(debug=True)`을 사용하면 어떤 효과가 있는가?",
    "option1": "서버를 디버그 모드로 실행하여 에러가 발생할 때 상세 정보를 제공한다.",
    "option2": "서버를 배포 모드로 실행하여 성능을 최적화한다.",
    "option3": "서버를 자동으로 종료시킨다.",
    "option4": "사용자의 요청을 로그로 기록한다.",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 `@app.before_request` 데코레이터는 어떤 용도로 사용되는가?",
    "option1": "요청이 들어오기 전에 실행되는 함수를 정의한다.",
    "option2": "응답이 반환되기 전에 실행되는 함수를 정의한다.",
    "option3": "응답이 오류일 때 실행되는 함수를 정의한다.",
    "option4": "클라이언트 요청을 기록하는 데 사용된다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 `session` 객체는 무엇을 관리하는 데 사용되는가?",
    "option1": "사용자별 데이터를 세션 간에 유지한다.",
    "option2": "HTTP 요청을 처리하는 데 사용된다.",
    "option3": "웹 애플리케이션의 서버 측 세션을 관리한다.",
    "option4": "사용자 인증 정보를 관리한다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Flask 보안 및 배포",
    "chapterNum": 5
  },
  {
    "question": "Flask에서 `abort()` 함수의 역할은 무엇인가?",
    "option1": "HTTP 요청을 종료하고 특정 상태 코드와 메시지를 반환한다.",
    "option2": "특정 URL로 리다이렉션을 처리한다.",
    "option3": "서버를 재시작한다.",
    "option4": "요청 헤더를 수정한다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 `request.json`을 사용하여 접근할 수 있는 데이터는 무엇인가?",
    "option1": "JSON 형식으로 전송된 요청 본문 데이터",
    "option2": "쿼리 파라미터",
    "option3": "폼 데이터",
    "option4": "헤더 정보",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 `app.config.from_pyfile()`은 어떤 용도로 사용되는가?",
    "option1": "외부 설정 파일에서 설정을 로드하는 데 사용된다.",
    "option2": "Flask 애플리케이션을 실행하는 데 사용된다.",
    "option3": "데이터베이스를 초기화하는 데 사용된다.",
    "option4": "플랫폼 정보를 반환하는 데 사용된다.",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "템플릿과 Jinja2",
    "chapterNum": 3
  },
  {
    "question": "Flask에서 `url_for()`를 사용하여 템플릿에서 URL을 동적으로 생성할 때, 해당 함수에 넘겨야 할 인자는 무엇인가?",
    "option1": "뷰 함수의 이름과 해당 뷰 함수의 인자들",
    "option2": "URL 경로와 HTTP 메소드",
    "option3": "사용자 인증 정보",
    "option4": "데이터베이스 연결 정보",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "라우팅과 뷰 함수",
    "chapterNum": 2
  },
  {
    "question": "Flask에서 `Flask-SQLAlchemy`를 사용하여 관계형 데이터베이스를 사용할 때, 기본적으로 사용하는 데이터베이스는 무엇인가?",
    "option1": "SQLite",
    "option2": "MySQL",
    "option3": "PostgreSQL",
    "option4": "MongoDB",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Flask-SQLAlchemy 및 CRUD",
    "chapterNum": 4
  }
]