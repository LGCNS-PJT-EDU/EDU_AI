[
  {
    "question": "Git Hook은 언제 실행되는 스크립트인가?",
    "option1": "커밋, 푸시 등의 이벤트 시점",
    "option2": "Git 설치 시점",
    "option3": "브랜치 삭제 시점",
    "option4": "저장소 복제 시점",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Git Hook 스크립트는 기본적으로 어떤 언어로 작성되는가?",
    "option1": "Python",
    "option2": "Shell Script",
    "option3": "JavaScript",
    "option4": "Ruby",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Git 기본 Hook 파일들이 위치하는 디렉토리는?",
    "option1": ".git/hooks",
    "option2": ".hooks",
    "option3": "hooks/",
    "option4": "src/hooks",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "커밋 전에 코드 검사를 자동으로 실행하기 위해 사용하는 Hook은?",
    "option1": "post-commit",
    "option2": "pre-commit",
    "option3": "pre-push",
    "option4": "commit-msg",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "커밋 메시지를 검증하는 데 사용되는 Git Hook은?",
    "option1": "pre-push",
    "option2": "pre-commit",
    "option3": "commit-msg",
    "option4": "post-merge",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Git Hook은 기본적으로 어떤 파일 형태로 제공되는가?",
    "option1": "활성화된 스크립트 파일",
    "option2": "비활성화된 샘플 파일",
    "option3": "JSON 설정 파일",
    "option4": "Markdown 문서",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Git Hook을 전역(global)으로 설정할 수 있는 방법은?",
    "option1": "global-hooks 디렉토리 지정",
    "option2": "git config --global core.hooksPath",
    "option3": "git global hook",
    "option4": "hooksPath 설정파일 추가",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Git Hook 중 push가 되기 전에 마지막으로 실행되는 Hook은?",
    "option1": "post-commit",
    "option2": "pre-push",
    "option3": "commit-msg",
    "option4": "post-merge",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Git Hook을 이용해 push를 차단할 수 있는 방법은?",
    "option1": "pre-commit 실패",
    "option2": "commit-msg 실패",
    "option3": "pre-push 실패",
    "option4": "merge-fail",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Git Hook을 통해 코드 품질 관리를 하는 이유는?",
    "option1": "개발 속도 향상",
    "option2": "코드 일관성 유지",
    "option3": "브랜치 보호",
    "option4": "리포지토리 용량 감소",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Git Hook 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Husky의 주요 목적은 무엇인가?",
    "option1": "Git Hook 관리 자동화",
    "option2": "Git 리포지토리 복제",
    "option3": "브랜치 자동 생성",
    "option4": "코드 리뷰 자동화",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky를 설치하는 기본 명령어는?",
    "option1": "npm install husky",
    "option2": "npm add git-hooks",
    "option3": "npm install hooker",
    "option4": "npm husky-setup",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky를 활성화하기 위해 필요한 명령어는?",
    "option1": "npx husky install",
    "option2": "npx husky start",
    "option3": "npx git-hook",
    "option4": "npm init husky",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky 설치 후 설정을 추가하는 파일은?",
    "option1": ".huskyrc",
    "option2": ".husky/",
    "option3": ".git/hooks",
    "option4": ".huskyconfig",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky를 통해 pre-commit Hook을 추가할 때 사용하는 명령어는?",
    "option1": "npx husky add .husky/pre-commit 'npm test'",
    "option2": "husky create pre-commit",
    "option3": "git add pre-commit",
    "option4": "npm run hook-add",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky 설치 시 .gitignore에 추가되지 않는 디렉토리는?",
    "option1": ".husky",
    "option2": "node_modules",
    "option3": "hooks",
    "option4": "build",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky를 package.json scripts에 등록하는 이유는?",
    "option1": "테스트 실행",
    "option2": "자동 설치 보장",
    "option3": "버전 업데이트",
    "option4": "gitignore 무시",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky를 설치 후 Git Hook이 정상 동작하지 않는 경우 우선 확인할 사항은?",
    "option1": ".git/hooks 디렉토리 존재 여부",
    "option2": "npm 버전",
    "option3": "Prettier 설치 여부",
    "option4": "프로젝트 크기",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky를 제거할 때 사용해야 하는 명령어는?",
    "option1": "npm uninstall husky",
    "option2": "npm remove git-hook",
    "option3": "npm husky-remove",
    "option4": "npx husky delete",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky 설치 시 Git Hook을 적용하기 위해 반드시 필요한 것은?",
    "option1": "package-lock.json",
    "option2": "git 초기화 (.git 존재)",
    "option3": "node_modules 재설치",
    "option4": "브랜치 생성",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Husky 소개와 설치",
    "chapterNum": 2
  },
  {
    "question": "Husky로 pre-commit Hook을 추가하려면 필요한 명령어는?",
    "option1": "husky create pre-commit",
    "option2": "npx husky add .husky/pre-commit",
    "option3": "git init hook",
    "option4": "npm install hooker",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "Husky를 사용하여 pre-push Hook을 설정할 때 경로는?",
    "option1": ".husky/pre-push",
    "option2": ".git/pre-push",
    "option3": "hooks/pre-push",
    "option4": ".husky/hooks/pre-push",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "Husky Hook 파일에서 실행할 명령어를 작성하는 파일은?",
    "option1": "package.json",
    "option2": "Hook script 파일",
    "option3": ".huskyrc",
    "option4": "hooks-config.js",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "Husky로 생성된 Hook 스크립트의 첫 번째 줄은 무엇이어야 하는가?",
    "option1": "#!/usr/bin/env husky",
    "option2": "#!/bin/bash",
    "option3": "#!node",
    "option4": "#!/usr/bin/env node",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "Husky의 pre-commit Hook에서 실패할 경우 결과는?",
    "option1": "커밋이 진행된다",
    "option2": "커밋이 차단된다",
    "option3": "푸시가 진행된다",
    "option4": "브랜치가 변경된다",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "Husky pre-push Hook에서 실패하면 어떤 일이 발생하는가?",
    "option1": "push가 정상적으로 완료된다",
    "option2": "push가 차단된다",
    "option3": "pull이 시작된다",
    "option4": "merge conflict 발생",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "Husky로 여러 명령어를 pre-commit에 실행할 때 사용하는 방법은?",
    "option1": "쉼표로 구분",
    "option2": "&& 연산자 사용",
    "option3": "파이프(|) 사용",
    "option4": "AND 명령어 사용",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "Husky 설정 후 git commit 시 pre-commit이 동작하지 않는 경우 우선 확인할 것은?",
    "option1": "node_modules 삭제 여부",
    "option2": ".husky 디렉토리 여부",
    "option3": "npm 버전",
    "option4": "yarn.lock 존재 여부",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "Husky hook 파일에 명령어를 추가하는 기본 방법은?",
    "option1": "scripts 항목 수정",
    "option2": "직접 shell script 수정",
    "option3": "npm script 작성",
    "option4": "git config 수정",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "Husky를 통해 pre-commit에서 lint 검사를 실행할 때 가장 일반적인 방법은?",
    "option1": "npm test",
    "option2": "npm run lint",
    "option3": "npm run build",
    "option4": "npm install lint",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Husky로 Git Hook 제어하기",
    "chapterNum": 3
  },
  {
    "question": "lint-staged의 주요 목적은 무엇인가?",
    "option1": "전체 코드 linting",
    "option2": "스테이징된 파일만 linting",
    "option3": "빌드 최적화",
    "option4": "버전 관리",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "lint-staged를 설치하는 명령어는?",
    "option1": "npm install lint-staged",
    "option2": "npm install lint-stage",
    "option3": "npm add staged-lint",
    "option4": "npm install pre-lint",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "lint-staged 설정을 추가할 수 있는 파일은?",
    "option1": ".lintstagedrc",
    "option2": "package.json",
    "option3": ".lintstage",
    "option4": ".stagedlint",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "lint-staged를 사용할 때 파일 패턴을 설정하는 이유는?",
    "option1": "전체 파일 적용",
    "option2": "변경된 파일만 지정 작업 적용",
    "option3": "Git 히스토리 추적",
    "option4": "버전 롤백",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "lint-staged 설정에서 JavaScript 파일에 ESLint를 적용하려면 어떻게 작성하는가?",
    "option1": "\"*.js\": \"eslint\"",
    "option2": "\"*.js\": \"prettier\"",
    "option3": "\"*.js\": \"node\"",
    "option4": "\"*.js\": \"test\"",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "lint-staged가 적용되는 파일 범위는?",
    "option1": "Git에 커밋된 모든 파일",
    "option2": "스테이지된 파일",
    "option3": "로컬 디렉토리 전체",
    "option4": "리포지토리 전체",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "lint-staged에서 여러 명령어를 실행하려면 어떻게 설정하는가?",
    "option1": "쉼표로 구분",
    "option2": "배열로 설정",
    "option3": "공백으로 구분",
    "option4": "세미콜론으로 구분",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "lint-staged를 통해 commit 전에 파일 포맷팅을 적용하려면 사용하는 명령어는?",
    "option1": "prettier --write",
    "option2": "eslint --fix",
    "option3": "lint --stage",
    "option4": "node --format",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "lint-staged 설정을 .lintstagedrc로 분리하는 이유는?",
    "option1": "설정 관리 편의성",
    "option2": "CI/CD 통합",
    "option3": "성능 향상",
    "option4": "Git Hook 자동화",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "lint-staged를 사용할 때 실패한 파일이 있을 경우 커밋은 어떻게 되는가?",
    "option1": "커밋 진행",
    "option2": "커밋 차단",
    "option3": "푸시 차단",
    "option4": "브랜치 변경",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "lint-staged 소개와 활용",
    "chapterNum": 4
  },
  {
    "question": "Husky와 lint-staged를 함께 사용하는 주된 이유는?",
    "option1": "전체 파일에 lint 적용",
    "option2": "스테이징된 파일에만 lint 및 포맷 적용",
    "option3": "브랜치 보호",
    "option4": "리포지토리 삭제",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  },
  {
    "question": "lint-staged를 실행하는 위치로 가장 적합한 Git Hook은?",
    "option1": "post-merge",
    "option2": "pre-push",
    "option3": "pre-commit",
    "option4": "post-commit",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  },
  {
    "question": "Husky로 lint-staged를 pre-commit에 연결하는 방법은?",
    "option1": "npm script 등록",
    "option2": "npx husky add .husky/pre-commit 'npx lint-staged'",
    "option3": "git push 설정",
    "option4": "prettier 설정",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  },
  {
    "question": "lint-staged 실행 실패 시 커밋은 어떻게 되는가?",
    "option1": "커밋 진행",
    "option2": "커밋 차단",
    "option3": "브랜치 변경",
    "option4": "push 진행",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  },
  {
    "question": "lint-staged 설정 파일에 여러 명령어를 적용할 때 사용하는 자료형은?",
    "option1": "Object",
    "option2": "Array",
    "option3": "String",
    "option4": "Number",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  },
  {
    "question": "Husky 설정 없이 lint-staged만 설치했을 경우 발생하는 문제는?",
    "option1": "Hook이 작동하지 않음",
    "option2": "빌드 실패",
    "option3": "버전 충돌",
    "option4": "리포지토리 삭제",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  },
  {
    "question": "lint-staged의 실행 명령어를 npx를 통해 바로 실행하려면 필요한 것은?",
    "option1": "package.json scripts",
    "option2": "npx lint-staged",
    "option3": "git lint",
    "option4": "npm run lint-stage",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  },
  {
    "question": "Husky의 pre-commit Hook 스크립트에서 lint-staged를 호출할 때 기본 사용 방법은?",
    "option1": "npm run lint",
    "option2": "npx lint-staged",
    "option3": "eslint staged",
    "option4": "prettier staged",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  },
  {
    "question": "lint-staged가 처리하는 파일은 기본적으로 어떤 상태인가?",
    "option1": "untracked",
    "option2": "staged",
    "option3": "committed",
    "option4": "ignored",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  },
  {
    "question": "Husky + lint-staged 통합 설정이 잘 작동하면 어떤 이점이 있는가?",
    "option1": "커밋 속도 향상",
    "option2": "코드 품질 유지와 일관성 확보",
    "option3": "브랜치 삭제 자동화",
    "option4": "파일 무결성 검사",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Husky + lint-staged 통합 자동화 실습",
    "chapterNum": 5
  }
]