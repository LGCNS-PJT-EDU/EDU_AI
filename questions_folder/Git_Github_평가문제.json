[
  {
    "question": "Git은 어떤 형식의 시스템인가?",
    "option1": "클라우드 스토리지",
    "option2": "버전 관리 시스템",
    "option3": "파일 서버",
    "option4": "DBMS",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git을 설치한 후 버전을 확인하는 명령어는?",
    "option1": "git check",
    "option2": "git version",
    "option3": "git install",
    "option4": "git info",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git 저장소를 초기화하는 명령어는?",
    "option1": "git start",
    "option2": "git new",
    "option3": "git init",
    "option4": "git create",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git은 어떤 모델을 기반으로 동작하는가?",
    "option1": "파일 차이 추적 모델",
    "option2": "파일 전체 스냅샷 모델",
    "option3": "SQL 데이터 모델",
    "option4": "REST API 모델",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git의 핵심 구조가 아닌 것은?",
    "option1": "Commit",
    "option2": "Branch",
    "option3": "Pull Request",
    "option4": "Repository",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git이 다른 버전 관리 시스템과 구별되는 가장 큰 특징은?",
    "option1": "클라우드 기반",
    "option2": "분산 버전 관리",
    "option3": "서버 의존성",
    "option4": "GUI 필수",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git 저장소 내 숨겨진 디렉토리는?",
    "option1": ".gitconfig",
    "option2": ".git",
    "option3": ".repository",
    "option4": ".version",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git 기본 사용자 이름 설정 명령어는?",
    "option1": "git user set",
    "option2": "git config user.name",
    "option3": "git set username",
    "option4": "git setup name",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git 저장소에서 'working directory'란 무엇인가?",
    "option1": "원격 저장소 경로",
    "option2": "현재 작업 중인 로컬 폴더",
    "option3": "서버 경로",
    "option4": "커밋된 파일 저장소",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git 저장소에서 'staging area'란?",
    "option1": "커밋된 파일 공간",
    "option2": "수정 대기 중 공간",
    "option3": "커밋 준비 중인 공간",
    "option4": "삭제 대기 공간",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Git 기본 개념과 설치",
    "chapterNum": 1
  },
  {
    "question": "Git에서 변경 사항을 스테이징 영역에 추가하는 명령어는?",
    "option1": "git commit",
    "option2": "git add",
    "option3": "git push",
    "option4": "git status",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "스테이징 영역에 추가된 파일을 저장소에 기록하는 명령어는?",
    "option1": "git save",
    "option2": "git push",
    "option3": "git commit",
    "option4": "git merge",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "현재 작업 디렉토리의 변경 상태를 확인하는 명령어는?",
    "option1": "git status",
    "option2": "git show",
    "option3": "git commit",
    "option4": "git log",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "마지막 커밋 메시지를 수정하는 명령어는?",
    "option1": "git amend",
    "option2": "git commit --amend",
    "option3": "git edit",
    "option4": "git rebase",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "수정한 파일을 이전 상태로 되돌리는 명령어는?",
    "option1": "git undo",
    "option2": "git reset file",
    "option3": "git restore file",
    "option4": "git rollback",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "git log 명령어는 무엇을 보여주는가?",
    "option1": "브랜치 목록",
    "option2": "커밋 기록",
    "option3": "변경된 파일 목록",
    "option4": "서버 상태",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "스테이징 영역에서 파일을 제거하는 명령어는?",
    "option1": "git remove",
    "option2": "git unstage",
    "option3": "git reset HEAD <file>",
    "option4": "git restore",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "로컬 저장소에 새 파일을 생성하고 Git이 추적하도록 하려면 필요한 명령어는?",
    "option1": "git create",
    "option2": "git add",
    "option3": "git push",
    "option4": "git commit",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "파일이 staging 되었는지 아닌지 구분하는 명령어는?",
    "option1": "git diff",
    "option2": "git compare",
    "option3": "git check",
    "option4": "git log",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "작업 트리와 스테이징 영역의 차이를 보는 명령어는?",
    "option1": "git status",
    "option2": "git diff",
    "option3": "git branch",
    "option4": "git show",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "로컬 저장소 관리",
    "chapterNum": 2
  },
  {
    "question": "Git에서 브랜치를 생성하는 명령어는?",
    "option1": "git branch <branch-name>",
    "option2": "git create branch",
    "option3": "git new branch",
    "option4": "git make branch",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "현재 브랜치를 확인하는 명령어는?",
    "option1": "git show-branch",
    "option2": "git branch",
    "option3": "git current",
    "option4": "git check",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "다른 브랜치로 이동하는 명령어는?",
    "option1": "git switch",
    "option2": "git change branch",
    "option3": "git move branch",
    "option4": "git jump",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "브랜치를 삭제하는 명령어는?",
    "option1": "git remove branch",
    "option2": "git delete branch",
    "option3": "git branch -d <branch-name>",
    "option4": "git clear branch",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "브랜치를 병합할 때 사용하는 명령어는?",
    "option1": "git merge",
    "option2": "git attach",
    "option3": "git connect",
    "option4": "git combine",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "병합 충돌이 발생했을 때 가장 먼저 해야 할 일은?",
    "option1": "push 하기",
    "option2": "충돌 해결",
    "option3": "commit 하기",
    "option4": "reset 하기",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "Fast-forward 병합이 가능한 상황은?",
    "option1": "브랜치가 동일 선상일 때",
    "option2": "병렬 작업이 많을 때",
    "option3": "리베이스 후일 때",
    "option4": "충돌 발생 시",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "Git에서 리베이스(rebase)의 주요 목적은?",
    "option1": "브랜치 삭제",
    "option2": "커밋 기록을 정리",
    "option3": "브랜치 연결 끊기",
    "option4": "브랜치 복제",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "rebase 중 충돌이 발생했을 때 해결 방법은?",
    "option1": "git abort",
    "option2": "git reset",
    "option3": "충돌 해결 후 git rebase --continue",
    "option4": "git merge",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "Git 병합 전략 중, 커밋 히스토리를 깔끔하게 유지하는 방법은?",
    "option1": "merge",
    "option2": "fast-forward",
    "option3": "rebase",
    "option4": "squash",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "브랜치와 병합 전략",
    "chapterNum": 3
  },
  {
    "question": "GitHub에서 원격 저장소를 복제하는 명령어는?",
    "option1": "git pull",
    "option2": "git clone",
    "option3": "git fetch",
    "option4": "git copy",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "로컬 저장소를 원격 저장소에 연결하는 명령어는?",
    "option1": "git connect",
    "option2": "git link",
    "option3": "git remote add",
    "option4": "git sync",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "원격 저장소의 정보를 확인하는 명령어는?",
    "option1": "git info remote",
    "option2": "git remote -v",
    "option3": "git remote info",
    "option4": "git check remote",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "GitHub에 변경 사항을 업로드하는 명령어는?",
    "option1": "git push",
    "option2": "git upload",
    "option3": "git send",
    "option4": "git deploy",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "원격 저장소의 최신 변경 사항을 가져오는 명령어는?",
    "option1": "git update",
    "option2": "git fetch",
    "option3": "git pull",
    "option4": "git clone",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "git fetch 후 로컬 브랜치에 적용하려면 어떤 명령어를 사용해야 하는가?",
    "option1": "git rebase",
    "option2": "git checkout",
    "option3": "git merge",
    "option4": "git switch",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "원격 저장소를 삭제하는 명령어는?",
    "option1": "git remove remote",
    "option2": "git remote delete",
    "option3": "git remote rm",
    "option4": "git delete origin",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "git push origin main 명령어의 의미는?",
    "option1": "main 브랜치를 로컬에 복제",
    "option2": "main 브랜치를 원격 저장소에 업로드",
    "option3": "main 브랜치를 삭제",
    "option4": "main 브랜치 이름 변경",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "GitHub에서 포크(fork) 기능은 어떤 역할을 하는가?",
    "option1": "프로젝트를 클론하는 것",
    "option2": "자신의 계정으로 프로젝트를 복사",
    "option3": "서버를 복제",
    "option4": "브랜치를 새로 만드는 것",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "GitHub에서 저장소를 복제(clone)한 후 바로 개발할 수 있는 브랜치는?",
    "option1": "master/main",
    "option2": "feature",
    "option3": "develop",
    "option4": "hotfix",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "GitHub와 원격 저장소 활용",
    "chapterNum": 4
  },
  {
    "question": "GitHub에서 협업 시 일반적으로 사용하는 요청 방식은?",
    "option1": "Push Request",
    "option2": "Pull Request",
    "option3": "Merge Request",
    "option4": "Commit Request",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  },
  {
    "question": "Pull Request를 생성할 때 필수적으로 지정해야 하는 것은?",
    "option1": "리포지토리 이름",
    "option2": "베이스 브랜치와 비교 브랜치",
    "option3": "커밋 ID",
    "option4": "패치 URL",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  },
  {
    "question": "GitHub 이슈(Issue)의 주요 목적은?",
    "option1": "코드 수정",
    "option2": "버그 관리 및 기능 요청",
    "option3": "커밋 관리",
    "option4": "프로젝트 복제",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  },
  {
    "question": "Pull Request에 리뷰어를 지정하는 목적은?",
    "option1": "자동 병합",
    "option2": "코드 검토 요청",
    "option3": "버그 수정",
    "option4": "브랜치 삭제",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  },
  {
    "question": "GitHub Actions는 무엇을 자동화하는 기능인가?",
    "option1": "이슈 생성",
    "option2": "CI/CD 파이프라인",
    "option3": "브랜치 복제",
    "option4": "저장소 삭제",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  },
  {
    "question": "Fork 후 Pull Request를 보내려면 먼저 해야 할 일은?",
    "option1": "origin으로 직접 push",
    "option2": "포크한 저장소에 push",
    "option3": "GitHub에서 Fork 취소",
    "option4": "새 브랜치 만들기",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  },
  {
    "question": "GitHub에서 커밋을 다른 사람과 연동할 때 필요한 것은?",
    "option1": "Email 등록",
    "option2": "SSH 키 설정",
    "option3": "GPG 서명 설정",
    "option4": "Fork 설정",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  },
  {
    "question": "GitHub 저장소를 비공개로 변경하려면 필요한 권한은?",
    "option1": "Contributor",
    "option2": "Owner",
    "option3": "Collaborator",
    "option4": "Reviewer",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  },
  {
    "question": "GitHub 이슈 템플릿을 설정하는 파일 위치는?",
    "option1": ".github/ISSUE_TEMPLATE/",
    "option2": "docs/ISSUE/",
    "option3": "src/issue_template/",
    "option4": "config/issues/",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  },
  {
    "question": "GitHub에서 squash merge를 선택하는 주요 이유는?",
    "option1": "히스토리를 깔끔하게 유지하기 위해",
    "option2": "모든 브랜치를 삭제하기 위해",
    "option3": "병합 충돌을 강제 발생시키기 위해",
    "option4": "코드를 롤백하기 위해",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "협업, PR, 이슈 및 고급 기능",
    "chapterNum": 5
  }
]