[
  {
    "question": "JavaScript에서 변수를 선언할 수 없는 키워드는?",
    "option1": "let",
    "option2": "const",
    "option3": "var",
    "option4": "define",
    "answerIndex": 4,
    "difficulty": "하",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "다음 중 JavaScript의 숫자형 타입은?",
    "option1": "Number",
    "option2": "Int",
    "option3": "Float",
    "option4": "Decimal",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "문자열을 나타내는 방법으로 올바르지 않은 것은?",
    "option1": "'Hello'",
    "option2": "\"Hello\"",
    "option3": "`Hello`",
    "option4": "<Hello>",
    "answerIndex": 4,
    "difficulty": "하",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "undefined와 null의 차이에 대한 설명으로 옳은 것은?",
    "option1": "둘 다 같은 의미이다",
    "option2": "undefined는 값이 할당되지 않음",
    "option3": "null은 정의되지 않음",
    "option4": "undefined는 명시적 초기화",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "typeof null의 결과는?",
    "option1": "object",
    "option2": "null",
    "option3": "undefined",
    "option4": "string",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "JavaScript에서 템플릿 리터럴은 무엇으로 묶는가?",
    "option1": "'",
    "option2": "\"",
    "option3": "`",
    "option4": "~",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "NaN은 어떤 상황에서 발생하는가?",
    "option1": "숫자 나누기 문자",
    "option2": "0 나누기 0",
    "option3": "문자 더하기 숫자",
    "option4": "undefined와 연산",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "const로 선언된 변수는 어떤 특징이 있는가?",
    "option1": "재선언 가능",
    "option2": "값 변경 가능",
    "option3": "블록 스코프",
    "option4": "자동 초기화",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "다음 중 falsy 값이 아닌 것은?",
    "option1": "0",
    "option2": "''",
    "option3": "false",
    "option4": "'false'",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "JavaScript에서 세미콜론(;)은 언제 필수인가?",
    "option1": "항상",
    "option2": "절대로 필요 없음",
    "option3": "문장 끝",
    "option4": "객체 안에서",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "기초 문법과 데이터 타입",
    "chapterNum": 1
  },
  {
    "question": "JavaScript에서 조건문 if를 작성할 때 사용하는 키워드는?",
    "option1": "when",
    "option2": "if",
    "option3": "cond",
    "option4": "case",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "조건문에서 여러 조건을 연결하는 연산자는?",
    "option1": "&",
    "option2": "|",
    "option3": "&&",
    "option4": "==",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "switch 문에서 각 조건을 나타내는 키워드는?",
    "option1": "case",
    "option2": "when",
    "option3": "option",
    "option4": "check",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "for 루프를 종료하는 키워드는?",
    "option1": "skip",
    "option2": "stop",
    "option3": "continue",
    "option4": "break",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "반복문의 조건을 건너뛰고 다음 반복으로 이동하는 키워드는?",
    "option1": "skip",
    "option2": "next",
    "option3": "continue",
    "option4": "redo",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "while 반복문의 조건이 false이면?",
    "option1": "무한 반복",
    "option2": "한 번 실행",
    "option3": "실행 안 됨",
    "option4": "오류 발생",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "do...while 루프의 특징으로 옳은 것은?",
    "option1": "조건을 먼저 검사",
    "option2": "조건이 true면 반복 안 함",
    "option3": "무조건 한 번 실행",
    "option4": "사용 불가",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "switch 문에서 break를 생략하면?",
    "option1": "에러 발생",
    "option2": "기본값 실행",
    "option3": "다음 case까지 실행",
    "option4": "루프 종료",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "다음 중 삼항 연산자의 형식으로 올바른 것은?",
    "option1": "조건 ? 참 : 거짓",
    "option2": "조건 : 참 ? 거짓",
    "option3": "조건 ? 거짓 : 참",
    "option4": "if ? then : else",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "for (let i = 0; i < 5; i++)에서 i++의 의미는?",
    "option1": "i를 1로 설정",
    "option2": "i를 1씩 증가",
    "option3": "i를 출력",
    "option4": "i를 감소",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "조건문과 반복문",
    "chapterNum": 2
  },
  {
    "question": "JavaScript에서 함수를 선언하는 키워드는?",
    "option1": "method",
    "option2": "function",
    "option3": "define",
    "option4": "func",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "함수를 실행하려면 어떻게 해야 하는가?",
    "option1": "call()",
    "option2": "invoke()",
    "option3": "함수명()",
    "option4": "do()",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "함수 내에서 사용된 변수는 기본적으로 어떤 스코프를 가지는가?",
    "option1": "전역",
    "option2": "지역",
    "option3": "블록",
    "option4": "클래스",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "화살표 함수의 기본 형태로 올바른 것은?",
    "option1": "function => {}",
    "option2": "() => {}",
    "option3": "-> {}",
    "option4": "{} => ()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "함수 표현식은 어떤 변수 키워드와 함께 자주 사용되는가?",
    "option1": "let",
    "option2": "const",
    "option3": "var",
    "option4": "모두 해당",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "return 키워드의 기능은?",
    "option1": "함수를 종료",
    "option2": "값을 반환",
    "option3": "다음 반복으로 이동",
    "option4": "코드를 건너뜀",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "화살표 함수에서 this는 무엇을 참조하는가?",
    "option1": "전역 객체",
    "option2": "함수 자신",
    "option3": "호출 컨텍스트",
    "option4": "화살표 함수는 this를 가지지 않음",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "즉시 실행 함수(IIFE)의 형식으로 맞는 것은?",
    "option1": "function(){}",
    "option2": "() => {}",
    "option3": "(function() {})()",
    "option4": "{}();",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "함수에서 매개변수를 생략하면?",
    "option1": "에러 발생",
    "option2": "undefined로 처리",
    "option3": "0으로 초기화",
    "option4": "null로 초기화",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "함수 내부에서 정의된 함수는 어떤 범위를 가지는가?",
    "option1": "전역",
    "option2": "함수 외부",
    "option3": "지역",
    "option4": "DOM",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "함수와 스코프",
    "chapterNum": 3
  },
  {
    "question": "JavaScript에서 배열을 생성하는 방법으로 옳은 것은?",
    "option1": "var a = [];",
    "option2": "var a = {};",
    "option3": "var a = ()",
    "option4": "var a = <>;",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "객체에서 속성에 접근하는 방법은?",
    "option1": "obj->key",
    "option2": "obj.key",
    "option3": "obj-key",
    "option4": "obj:key",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "다음 중 배열에 요소를 추가하는 메서드는?",
    "option1": "push()",
    "option2": "pop()",
    "option3": "shift()",
    "option4": "splice()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "객체의 속성 값을 삭제하는 키워드는?",
    "option1": "remove",
    "option2": "delete",
    "option3": "clear",
    "option4": "drop",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "배열의 모든 요소에 대해 반복 실행하는 메서드는?",
    "option1": "map()",
    "option2": "forEach()",
    "option3": "filter()",
    "option4": "reduce()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "객체의 모든 키를 배열로 반환하는 메서드는?",
    "option1": "Object.values()",
    "option2": "Object.keys()",
    "option3": "Object.entries()",
    "option4": "Object.map()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "배열에서 요소를 제거하는 pop()은 어느 쪽 요소를 제거하는가?",
    "option1": "처음",
    "option2": "중간",
    "option3": "마지막",
    "option4": "랜덤",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "배열의 길이를 반환하는 속성은?",
    "option1": "size",
    "option2": "count",
    "option3": "length",
    "option4": "items",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "객체의 속성과 값을 모두 배열 형태로 반환하는 메서드는?",
    "option1": "Object.keys()",
    "option2": "Object.values()",
    "option3": "Object.entries()",
    "option4": "Object.toArray()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "배열의 복사를 위한 메서드로 적절한 것은?",
    "option1": "slice()",
    "option2": "splice()",
    "option3": "pop()",
    "option4": "map()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "배열과 객체",
    "chapterNum": 4
  },
  {
    "question": "HTML 요소를 JavaScript로 가져올 때 사용하는 메서드는?",
    "option1": "getElement()",
    "option2": "query()",
    "option3": "getElementById()",
    "option4": "fetchElement()",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  },
  {
    "question": "다음 중 이벤트 리스너 등록 메서드는?",
    "option1": "addEvent()",
    "option2": "setEvent()",
    "option3": "addEventListener()",
    "option4": "eventListen()",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  },
  {
    "question": "버튼 클릭 시 실행되는 이벤트 타입은?",
    "option1": "hover",
    "option2": "mousedown",
    "option3": "click",
    "option4": "submit",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  },
  {
    "question": "다음 중 innerText와 유사한 속성은?",
    "option1": "textValue",
    "option2": "htmlText",
    "option3": "textContent",
    "option4": "innerHTML",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  },
  {
    "question": "이벤트 객체에서 발생한 요소를 참조하는 속성은?",
    "option1": "target",
    "option2": "source",
    "option3": "caller",
    "option4": "element",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  },
  {
    "question": "이벤트 전파를 막는 메서드는?",
    "option1": "preventDefault()",
    "option2": "stopPropagation()",
    "option3": "cancelEvent()",
    "option4": "blockEvent()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  },
  {
    "question": "DOMContentLoaded 이벤트는 언제 발생하는가?",
    "option1": "페이지 로딩 시작 시",
    "option2": "스크립트 로딩 완료 시",
    "option3": "DOM 트리 완성 시",
    "option4": "이미지 로딩 완료 시",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  },
  {
    "question": "innerHTML 속성의 특징으로 옳은 것은?",
    "option1": "보안에 강함",
    "option2": "텍스트만 출력",
    "option3": "HTML 태그 포함 출력",
    "option4": "읽기 전용",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  },
  {
    "question": "HTML 요소 클래스 추가 시 사용하는 메서드는?",
    "option1": "addClass()",
    "option2": "appendClass()",
    "option3": "classAdd()",
    "option4": "classList.add()",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  },
  {
    "question": "폼 제출 시 기본 동작을 막으려면?",
    "option1": "event.stopPropagation()",
    "option2": "event.preventDefault()",
    "option3": "return false",
    "option4": "event.block()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "DOM 조작과 이벤트 처리",
    "chapterNum": 5
  }
]