[
  {
    "question": "Jasmine은 어떤 종류의 테스트 프레임워크인가?",
    "option1": "E2E 테스트",
    "option2": "유닛 테스트",
    "option3": "통합 테스트",
    "option4": "UI 테스트",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine 테스트를 그룹화하는 함수는?",
    "option1": "test()",
    "option2": "describe()",
    "option3": "group()",
    "option4": "it()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine에서 개별 테스트 케이스를 정의하는 함수는?",
    "option1": "describe()",
    "option2": "it()",
    "option3": "testCase()",
    "option4": "example()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine에서 테스트 시작 전 실행되는 함수는?",
    "option1": "beforeAll()",
    "option2": "afterEach()",
    "option3": "beforeEach()",
    "option4": "init()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine에서 모든 테스트가 끝난 후 실행되는 함수는?",
    "option1": "afterEach()",
    "option2": "afterAll()",
    "option3": "beforeAll()",
    "option4": "done()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine의 BDD 스타일 문법에서 'expect'는 무엇을 정의하는가?",
    "option1": "테스트 스위트",
    "option2": "예상 결과",
    "option3": "비동기 콜백",
    "option4": "모듈 임포트",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine에서 여러 조건 중 하나라도 실패하면?",
    "option1": "다음 조건 무시",
    "option2": "전체 테스트 실패",
    "option3": "계속 진행",
    "option4": "조건 무효화",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine 테스트를 임시로 비활성화할 때 사용하는 함수는?",
    "option1": "it.skip()",
    "option2": "xdescribe()",
    "option3": "xit()",
    "option4": "disabled()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine에서 테스트 스위트를 비활성화하는 함수는?",
    "option1": "skipSuite()",
    "option2": "disabledDescribe()",
    "option3": "xdescribe()",
    "option4": "xgroup()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine 테스트 스위트 실행 순서는?",
    "option1": "랜덤",
    "option2": "정렬된 순서",
    "option3": "정의된 순서",
    "option4": "우선순위 지정",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Jasmine 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Jasmine에서 'toBe()' 매처는 무엇을 비교하는가?",
    "option1": "값만 비교",
    "option2": "참조 비교",
    "option3": "깊은 복사 비교",
    "option4": "타입 비교",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine에서 'toEqual()' 매처는 어떤 비교를 수행하는가?",
    "option1": "참조 비교",
    "option2": "값 비교",
    "option3": "주소 비교",
    "option4": "타입 체크",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine에서 'toBeTruthy()' 매처는 어떤 결과를 기대하는가?",
    "option1": "false",
    "option2": "null",
    "option3": "truthy 값",
    "option4": "undefined",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine에서 배열이나 객체의 포함 여부를 검사하는 매처는?",
    "option1": "toBeDefined()",
    "option2": "toContain()",
    "option3": "toMatch()",
    "option4": "toBeGreaterThan()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine 테스트 구조에서 'beforeEach'는 어떤 역할을 하는가?",
    "option1": "모든 테스트 후 초기화",
    "option2": "각 테스트 전에 준비 작업 수행",
    "option3": "모든 테스트 후 실행",
    "option4": "모든 테스트를 스킵",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine 매처 중 정규 표현식 검증에 사용하는 것은?",
    "option1": "toMatch()",
    "option2": "toContain()",
    "option3": "toBeDefined()",
    "option4": "toBeTruthy()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine에서 값이 undefined가 아닌지 확인하는 매처는?",
    "option1": "toBeNull()",
    "option2": "toBeFalsy()",
    "option3": "toBeDefined()",
    "option4": "toEqual()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine에서 'not'을 사용하면 매처의 의미가 어떻게 변하는가?",
    "option1": "조건이 강제된다",
    "option2": "반대 조건을 테스트",
    "option3": "항상 true 반환",
    "option4": "비교를 생략",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine에서 두 값이 '같거나 크다'를 검사하는 매처는?",
    "option1": "toBeGreaterThanOrEqual()",
    "option2": "toBeLessThan()",
    "option3": "toBe()",
    "option4": "toEqual()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine 매처 중 배열의 길이를 검증하는 매처는?",
    "option1": "toHaveLength()",
    "option2": "toContainLength()",
    "option3": "toMatchLength()",
    "option4": "toEqualLength()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Matchers와 테스트 구조",
    "chapterNum": 2
  },
  {
    "question": "Jasmine에서 비동기 테스트를 완료하기 위해 사용하는 인자는?",
    "option1": "resolve",
    "option2": "done",
    "option3": "finish",
    "option4": "end",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "비동기 테스트에서 done() 호출을 잊으면 테스트 결과는?",
    "option1": "성공",
    "option2": "실패",
    "option3": "무시",
    "option4": "강제 패스",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "setTimeout을 사용하는 테스트에서 반드시 해야 하는 것은?",
    "option1": "spy 생성",
    "option2": "afterEach 호출",
    "option3": "done() 호출",
    "option4": "flush() 호출",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "Jasmine의 비동기 테스트는 기본적으로 몇 초 후 타임아웃이 발생하는가?",
    "option1": "1초",
    "option2": "3초",
    "option3": "5초",
    "option4": "10초",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "비동기 작업 완료 후 done.fail()을 호출하면 테스트 결과는?",
    "option1": "성공",
    "option2": "실패",
    "option3": "경고",
    "option4": "건너뜀",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "async/await를 사용할 때 Jasmine에서 done()을 사용해야 하는가?",
    "option1": "항상 필요",
    "option2": "필요 없다",
    "option3": "테스트마다 다름",
    "option4": "await 내부만 필요",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "fakeAsync() 함수의 주된 역할은?",
    "option1": "실제 비동기 호출",
    "option2": "비동기 코드 동기화",
    "option3": "spy 생성",
    "option4": "mock 데이터 제공",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "tick() 함수는 어떤 상황에서 사용하는가?",
    "option1": "비동기 지연을 시뮬레이션",
    "option2": "HTTP 요청 차단",
    "option3": "스파이 추적",
    "option4": "테스트 그룹 생성",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "flush() 함수는 어떤 역할을 하는가?",
    "option1": "모든 pending 타이머 실행",
    "option2": "모든 spy 제거",
    "option3": "테스트 그룹 제거",
    "option4": "모든 에러 무시",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "비동기 테스트 중 특정 지연 시간을 시뮬레이션하려면 어떤 조합을 사용하는가?",
    "option1": "fakeAsync() + tick()",
    "option2": "async() + flush()",
    "option3": "it() + spyOn()",
    "option4": "beforeEach() + done()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "비동기 테스트",
    "chapterNum": 3
  },
  {
    "question": "Jasmine에서 함수를 가로채고 감시하는 도구는?",
    "option1": "Mock",
    "option2": "Spy",
    "option3": "Stub",
    "option4": "Fake",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "SpyOn 함수의 주요 기능은?",
    "option1": "테스트 실행",
    "option2": "함수 호출 감시",
    "option3": "컴포넌트 생성",
    "option4": "라우팅 추적",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "Jasmine에서 'and.returnValue()'를 사용하면?",
    "option1": "원래 함수를 호출한다",
    "option2": "지정된 값을 반환한다",
    "option3": "오류를 발생시킨다",
    "option4": "비동기 동작을 차단한다",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "SpyOn을 사용할 때 필요한 첫 번째 인자는 무엇인가?",
    "option1": "테스트 케이스",
    "option2": "타겟 객체",
    "option3": "메서드 이름",
    "option4": "리턴 값",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "SpyOn을 사용할 때 두 번째 인자는 무엇인가?",
    "option1": "리턴 값",
    "option2": "타겟 객체",
    "option3": "메서드 이름",
    "option4": "테스트 설명",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "spy.calls.any()는 무엇을 확인하는가?",
    "option1": "호출 횟수",
    "option2": "최초 호출 여부",
    "option3": "한 번이라도 호출되었는지 여부",
    "option4": "모든 호출 데이터",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "스파이가 호출된 횟수를 확인하는 방법은?",
    "option1": "spy.callCount()",
    "option2": "spy.calls.count()",
    "option3": "spy.getCall()",
    "option4": "spy.count()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "스파이가 호출된 인자를 확인하려면?",
    "option1": "spy.calls.argsFor()",
    "option2": "spy.args()",
    "option3": "spy.calls.getArguments()",
    "option4": "spy.arguments()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "SpyOnProperty()는 무엇을 스파이하는가?",
    "option1": "객체 메서드",
    "option2": "객체 프로퍼티",
    "option3": "라우트 파라미터",
    "option4": "DOM 이벤트",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "Jasmine에서 스파이를 리셋하려면 사용하는 함수는?",
    "option1": "reset()",
    "option2": "spy.resetCalls()",
    "option3": "spy.calls.reset()",
    "option4": "spy.clear()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "스파이(Spy)와 Mock",
    "chapterNum": 4
  },
  {
    "question": "Angular에서 컴포넌트 테스트를 준비할 때 사용하는 함수는?",
    "option1": "configureTestingModule()",
    "option2": "setupTesting()",
    "option3": "initTesting()",
    "option4": "initializeTest()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  },
  {
    "question": "TestBed는 무엇을 위한 Angular 유틸리티인가?",
    "option1": "라우팅 제어",
    "option2": "컴포넌트 테스트 환경 구성",
    "option3": "HTTP 요청 처리",
    "option4": "서버 사이드 렌더링",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  },
  {
    "question": "TestBed.configureTestingModule()에서 등록하는 것이 아닌 것은?",
    "option1": "declarations",
    "option2": "imports",
    "option3": "providers",
    "option4": "controllers",
    "answerIndex": 4,
    "difficulty": "하",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  },
  {
    "question": "Angular 테스트에서 컴포넌트 인스턴스를 얻기 위해 사용하는 객체는?",
    "option1": "ComponentFixture",
    "option2": "TestRunner",
    "option3": "TestComponent",
    "option4": "TestingModule",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  },
  {
    "question": "fixture.detectChanges()의 역할은?",
    "option1": "라우터 초기화",
    "option2": "컴포넌트 변경 사항 반영",
    "option3": "테스트 종료",
    "option4": "서버 통신 시작",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  },
  {
    "question": "TestBed.createComponent()가 반환하는 것은?",
    "option1": "컴포넌트 인스턴스",
    "option2": "서비스 인스턴스",
    "option3": "HTTP 요청 객체",
    "option4": "Router 객체",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  },
  {
    "question": "Angular에서 서비스 테스트를 위해 사용되는 함수는?",
    "option1": "TestService()",
    "option2": "inject()",
    "option3": "getService()",
    "option4": "setupService()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  },
  {
    "question": "TestBed.inject()로 얻은 인스턴스는 어디에서 사용 가능한가?",
    "option1": "모든 테스트 케이스",
    "option2": "해당 스펙 내에서만",
    "option3": "어플리케이션 전체",
    "option4": "루트 모듈",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  },
  {
    "question": "Angular 테스트에서 async() 함수의 주요 역할은?",
    "option1": "동기화 보장",
    "option2": "비동기 작업 대기",
    "option3": "라우터 초기화",
    "option4": "모듈 등록",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  },
  {
    "question": "Angular 테스트 환경을 재설정하려면 호출해야 하는 함수는?",
    "option1": "TestBed.clearTestingModule()",
    "option2": "TestBed.resetTestingModule()",
    "option3": "TestBed.rebuild()",
    "option4": "TestBed.cleanup()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Angular 테스트 통합",
    "chapterNum": 5
  }
]