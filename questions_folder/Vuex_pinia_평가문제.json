[
  {
    "question": "Vuex는 어떤 목적을 가지고 설계되었는가?",
    "option1": "라우팅 관리",
    "option2": "컴포넌트 스타일링",
    "option3": "전역 상태 관리",
    "option4": "API 연동",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vuex의 상태는 어디에 저장되는가?",
    "option1": "컴포넌트",
    "option2": "store",
    "option3": "getter",
    "option4": "plugin",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vuex의 주요 네 가지 구성 요소는?",
    "option1": "state, view, router, service",
    "option2": "data, props, methods, computed",
    "option3": "state, getters, mutations, actions",
    "option4": "store, plugin, route, controller",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vuex는 어떤 디자인 패턴에서 영감을 받았는가?",
    "option1": "MVC",
    "option2": "MVVM",
    "option3": "Flux",
    "option4": "Observer",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vuex store를 Vue 인스턴스에 주입할 때 사용하는 속성은?",
    "option1": "store",
    "option2": "data",
    "option3": "use",
    "option4": "provide",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vuex에서 상태를 변경할 수 있는 유일한 방식은?",
    "option1": "actions",
    "option2": "mutations",
    "option3": "getters",
    "option4": "methods",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "store를 여러 모듈로 분할할 때 사용하는 속성은?",
    "option1": "modules",
    "option2": "parts",
    "option3": "reducers",
    "option4": "groups",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vuex는 상태를 어떤 방식으로 관리하는가?",
    "option1": "계층 구조로 분산 저장",
    "option2": "싱글톤 구조의 중앙 집중 저장",
    "option3": "로컬 컴포넌트 상태 저장",
    "option4": "네임스페이스 기반 저장",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vuex 상태를 컴포넌트에서 사용하기 위한 헬퍼 함수는?",
    "option1": "useState",
    "option2": "mapState",
    "option3": "getState",
    "option4": "useStore",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vuex store를 생성하는 함수는?",
    "option1": "createStore",
    "option2": "makeStore",
    "option3": "useStore",
    "option4": "initStore",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Vuex 기본 개념",
    "chapterNum": 1
  },
  {
    "question": "Vuex에서 state는 어떤 역할을 하는가?",
    "option1": "상태 읽기 전용 값",
    "option2": "상태를 변경하는 메서드",
    "option3": "애플리케이션의 중앙 상태",
    "option4": "라우터 정보",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "getters의 주 목적은?",
    "option1": "상태 변경",
    "option2": "비동기 처리",
    "option3": "계산된 상태 반환",
    "option4": "상태 초기화",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "mutations의 특징은?",
    "option1": "비동기 가능",
    "option2": "상태 변경은 하지 않음",
    "option3": "동기적 상태 변경",
    "option4": "컴포넌트 호출에서만 사용",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "getters는 어떤 형식으로 정의되는가?",
    "option1": "객체",
    "option2": "배열",
    "option3": "컴포넌트",
    "option4": "router",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "mutations의 첫 번째 인자는?",
    "option1": "payload",
    "option2": "getter",
    "option3": "state",
    "option4": "commit",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "getters는 어떤 방식으로 호출되는가?",
    "option1": "this.getters()",
    "option2": "store.getters.name",
    "option3": "store.call()",
    "option4": "state.get()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "Vue 컴포넌트에서 state를 가져오기 위한 헬퍼 함수는?",
    "option1": "useState",
    "option2": "mapState",
    "option3": "connect",
    "option4": "mapMutations",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "commit() 함수는 무엇을 실행하는가?",
    "option1": "state 읽기",
    "option2": "mutation 실행",
    "option3": "action 호출",
    "option4": "router 이동",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "state를 직접 변경하는 것이 권장되지 않는 이유는?",
    "option1": "반응형이 깨짐",
    "option2": "에러 발생",
    "option3": "state가 읽기 전용이기 때문",
    "option4": "state는 컴포넌트 전용이기 때문",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "getters 내부에서는 무엇을 사용할 수 있는가?",
    "option1": "state와 다른 getters",
    "option2": "mutations 호출",
    "option3": "비동기 로직",
    "option4": "DOM 접근",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "State, Getters, Mutations",
    "chapterNum": 2
  },
  {
    "question": "Vuex에서 actions의 주된 목적은?",
    "option1": "동기 상태 변경",
    "option2": "비동기 작업 처리",
    "option3": "컴포넌트 생성",
    "option4": "라우터 설정",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "actions 내부에서 상태 변경을 위해 사용하는 함수는?",
    "option1": "state()",
    "option2": "commit()",
    "option3": "update()",
    "option4": "mapState()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "actions는 어떤 값을 반환할 수 있는가?",
    "option1": "store",
    "option2": "state",
    "option3": "promise",
    "option4": "component",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "actions의 첫 번째 인자는?",
    "option1": "state",
    "option2": "context",
    "option3": "rootState",
    "option4": "dispatch",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "비동기 요청을 처리한 후 mutation을 호출하려면?",
    "option1": "dispatch → commit",
    "option2": "commit → dispatch",
    "option3": "mapState",
    "option4": "direct setState",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "actions에서 다른 actions를 호출할 때 사용하는 메서드는?",
    "option1": "commit",
    "option2": "dispatch",
    "option3": "invoke",
    "option4": "runAction",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "actions 내부에서 context.commit을 사용하는 이유는?",
    "option1": "뷰 업데이트",
    "option2": "상태 직접 접근",
    "option3": "mutation 실행",
    "option4": "getter 계산",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "actions에서 API 요청 실패를 처리하는 방법은?",
    "option1": "errorHandler()",
    "option2": "throw new Error()",
    "option3": "try...catch 블록 사용",
    "option4": "setError()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "actions는 왜 mutation을 직접 호출하지 않고 commit을 사용하는가?",
    "option1": "기능 분리",
    "option2": "보안상 이유",
    "option3": "Vue 컴포넌트와 독립성 확보",
    "option4": "strict 모드 때문",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "Vuex에서 actions는 언제 호출되는가?",
    "option1": "컴포넌트 렌더링 시",
    "option2": "watcher에 의해",
    "option3": "dispatch()로 호출될 때",
    "option4": "router가 변경될 때",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Actions와 비동기 처리",
    "chapterNum": 3
  },
  {
    "question": "Pinia는 Vue에서 어떤 역할을 하는가?",
    "option1": "라우팅 처리",
    "option2": "상태 관리",
    "option3": "스타일링 지원",
    "option4": "컴포넌트 등록",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "Pinia를 사용하려면 가장 먼저 해야 할 일은?",
    "option1": "Vue 설치",
    "option2": "useStore 호출",
    "option3": "createPinia 생성",
    "option4": "setupState 실행",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "Pinia에서 스토어를 생성하는 함수는?",
    "option1": "defineStore",
    "option2": "createStore",
    "option3": "makeStore",
    "option4": "setupStore",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "defineStore의 첫 번째 인자는?",
    "option1": "state",
    "option2": "store 이름",
    "option3": "actions",
    "option4": "getter",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "Pinia에서 상태를 가져올 때 사용하는 방식은?",
    "option1": "this.$store.state",
    "option2": "useStore().state",
    "option3": "useStore()",
    "option4": "getState()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "Pinia는 어떤 Vue 기능과 잘 통합되는가?",
    "option1": "watchEffect",
    "option2": "Composition API",
    "option3": "Option API",
    "option4": "script setup",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "Pinia에서 정의한 store를 가져오려면?",
    "option1": "createStore()",
    "option2": "useStore()",
    "option3": "defineStore()",
    "option4": "getState()",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "Pinia는 Vue 3 이전에도 사용할 수 있는가?",
    "option1": "가능하다",
    "option2": "Vue 2는 미지원",
    "option3": "Vuex 기반",
    "option4": "React 전용",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "Pinia store는 어떻게 구성되는가?",
    "option1": "state, actions, getters",
    "option2": "methods, data, props",
    "option3": "modules, views",
    "option4": "only state",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "Pinia는 Vue의 어떤 API와 함께 사용하는 것이 권장되는가?",
    "option1": "setup()",
    "option2": "created()",
    "option3": "mounted()",
    "option4": "methods()",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Pinia 기본 사용법",
    "chapterNum": 4
  },
  {
    "question": "Pinia를 Vue 앱에 적용하려면 어떤 함수로 등록해야 하는가?",
    "option1": "app.use(pinia)",
    "option2": "createPinia(pinia)",
    "option3": "registerPinia()",
    "option4": "initPinia()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  },
  {
    "question": "Pinia에서 반응형 상태를 만들기 위해 사용하는 Vue 기능은?",
    "option1": "reactive()",
    "option2": "ref()",
    "option3": "computed()",
    "option4": "watch()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  },
  {
    "question": "Pinia의 store는 Vue 컴포넌트 내에서 어떻게 사용되는가?",
    "option1": "mapStore()",
    "option2": "this.store",
    "option3": "useStore()",
    "option4": "getStore()",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  },
  {
    "question": "Pinia와 Vue Router를 통합할 때 중요한 설정은?",
    "option1": "routerView()",
    "option2": "router.push()",
    "option3": "store 내부에서 router 사용",
    "option4": "라우터와 store 분리",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  },
  {
    "question": "Pinia에서의 상태 변화는 Vue DevTools에서 추적 가능한가?",
    "option1": "아니다",
    "option2": "조건부 지원",
    "option3": "기본적으로 지원된다",
    "option4": "설치 필요",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  },
  {
    "question": "Pinia store를 여러 모듈로 나눌 때 사용하는 패턴은?",
    "option1": "modules",
    "option2": "defineStore 별도 파일 분리",
    "option3": "Vuex 모듈",
    "option4": "composition mixin",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  },
  {
    "question": "Pinia store 내부의 상태를 외부에서 반응형으로 가져오기 위해 사용하는 방법은?",
    "option1": "computed()",
    "option2": "store.state",
    "option3": "storeToRefs()",
    "option4": "ref()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  },
  {
    "question": "Pinia는 어떤 패러다임에 더 잘 맞는가?",
    "option1": "옵션 기반 API",
    "option2": "Composition API",
    "option3": "Class API",
    "option4": "Template-only",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  },
  {
    "question": "Pinia는 Vue의 어떤 기능과 가장 밀접하게 통합되어 있는가?",
    "option1": "Vue Router",
    "option2": "setup()",
    "option3": "transition",
    "option4": "lifecycle hooks",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  },
  {
    "question": "Pinia store를 컴포넌트에서 자동 추적하기 위해 사용하는 함수는?",
    "option1": "reactiveStore()",
    "option2": "toRefs()",
    "option3": "storeToRefs()",
    "option4": "trackStore()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Pinia와 Vue 생태계 통합",
    "chapterNum": 5
  }
]