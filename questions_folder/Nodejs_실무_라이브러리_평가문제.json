[
  {
    "question": "Node.js에서 파일 시스템을 제어하는 기본 모듈은?",
    "option1": "os",
    "option2": "http",
    "option3": "fs",
    "option4": "net",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "Node.js에서 웹 서버를 생성하는 데 사용하는 모듈은?",
    "option1": "http",
    "option2": "net",
    "option3": "stream",
    "option4": "url",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "path.join() 함수의 주요 목적은?",
    "option1": "파일 삭제",
    "option2": "경로 결합",
    "option3": "스트림 생성",
    "option4": "URL 파싱",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "os 모듈로 할 수 있는 작업은?",
    "option1": "파일 생성",
    "option2": "메모리 정보 확인",
    "option3": "라우팅",
    "option4": "웹 요청 수신",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "url.parse() 함수의 주요 역할은?",
    "option1": "경로 조작",
    "option2": "URL 구성요소 추출",
    "option3": "HTML 파싱",
    "option4": "요청 응답 처리",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "Buffer는 어떤 데이터를 처리하는 데 사용되는가?",
    "option1": "텍스트 데이터",
    "option2": "바이너리 데이터",
    "option3": "JSON 데이터",
    "option4": "이미지 URL",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "stream 모듈의 주된 용도는?",
    "option1": "HTTP 라우팅",
    "option2": "이벤트 핸들링",
    "option3": "데이터 흐름 처리",
    "option4": "네트워크 소켓 연결",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "util.promisify()의 역할은?",
    "option1": "동기화 실행",
    "option2": "콜백을 Promise로 변환",
    "option3": "파일 경로 병합",
    "option4": "서버 생성",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "crypto 모듈은 무엇을 위한 것인가?",
    "option1": "네트워크 요청",
    "option2": "보안 해시 및 암호화",
    "option3": "디버깅",
    "option4": "서버 실행",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "Node.js에서 global 객체는 어떤 역할을 하는가?",
    "option1": "전역 네임스페이스 제공",
    "option2": "모듈 임포트",
    "option3": "서버 생성",
    "option4": "파일 읽기",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Node.js Core Modules",
    "chapterNum": 1
  },
  {
    "question": "Express.js에서 HTTP GET 요청을 처리하는 메서드는?",
    "option1": "app.fetch()",
    "option2": "app.get()",
    "option3": "app.receive()",
    "option4": "app.post()",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "Express에서 정적 파일을 제공할 때 사용하는 미들웨어는?",
    "option1": "express.static()",
    "option2": "express.staticServe()",
    "option3": "app.serve()",
    "option4": "express.file()",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "다음 중 Express.js에서 경로 파라미터를 정의하는 방식은?",
    "option1": "/user/id",
    "option2": "/user?id=1",
    "option3": "/user/:id",
    "option4": "/user#id",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "Express에서 미들웨어는 어떤 역할을 하는가?",
    "option1": "데이터베이스 연결",
    "option2": "요청-응답 처리 사이 중간 로직",
    "option3": "HTML 렌더링",
    "option4": "라우팅 생략",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "app.use()는 어떤 용도로 사용되는가?",
    "option1": "라우팅 정의",
    "option2": "미들웨어 등록",
    "option3": "서버 실행",
    "option4": "포트 설정",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "Express에서 JSON 파싱을 위해 사용하는 미들웨어는?",
    "option1": "express.json()",
    "option2": "app.bodyParser()",
    "option3": "jsonParser()",
    "option4": "express.body()",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "다음 중 라우터 인스턴스를 생성하는 방법은?",
    "option1": "express.newRouter()",
    "option2": "new express.Router()",
    "option3": "express.Router()",
    "option4": "Router.create()",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "라우터를 app에 연결할 때 사용하는 메서드는?",
    "option1": "app.route()",
    "option2": "app.getRouter()",
    "option3": "app.bindRouter()",
    "option4": "app.use()",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "Express에서 에러 핸들링 미들웨어는 몇 개의 인자를 가지는가?",
    "option1": "2",
    "option2": "3",
    "option3": "4",
    "option4": "5",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "라우팅 순서를 보장하려면 어떻게 해야 하는가?",
    "option1": "이벤트 루프 사용",
    "option2": "미들웨어 체이닝",
    "option3": "정의 순서대로 선언",
    "option4": "라우팅 모듈화",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "Express.js",
    "chapterNum": 2
  },
  {
    "question": "Node.js에서 외부 패키지를 설치할 때 사용하는 명령어는?",
    "option1": "node install",
    "option2": "npm install",
    "option3": "npm add",
    "option4": "npm get",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "package.json 파일의 주된 목적은?",
    "option1": "코드 설명",
    "option2": "서버 설정",
    "option3": "프로젝트 의존성 관리",
    "option4": "HTML 빌드",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "Node.js에서 다른 파일의 기능을 가져올 때 사용하는 키워드는?",
    "option1": "import",
    "option2": "require",
    "option3": "include",
    "option4": "use",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "로컬 의존성이 설치되는 기본 위치는?",
    "option1": "node_modules/",
    "option2": ".npm/",
    "option3": "lib/",
    "option4": "packages/",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "버전 범위를 ^1.2.3 로 명시하면 허용되는 버전은?",
    "option1": "1.2.3 이상 1.3.0 미만",
    "option2": "1.2.3 이상 2.0.0 미만",
    "option3": "1.2.3 이상 1.2.4 미만",
    "option4": "정확히 1.2.3",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "package-lock.json 파일의 역할은?",
    "option1": "버전 고정 및 재현 가능성 제공",
    "option2": "개발자 정보 저장",
    "option3": "빌드 로그 저장",
    "option4": "서버 로그 기록",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "npm uninstall 명령어의 용도는?",
    "option1": "프로젝트 제거",
    "option2": "노드 환경 삭제",
    "option3": "패키지 제거",
    "option4": "전체 초기화",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "전역으로 패키지를 설치할 때 사용하는 옵션은?",
    "option1": "-g",
    "option2": "-d",
    "option3": "--local",
    "option4": "--all",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "모듈을 내보낼 때 사용하는 키워드는?",
    "option1": "export.module",
    "option2": "require",
    "option3": "module.exports",
    "option4": "return module",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "package.json 파일에서 실행 스크립트를 지정하는 필드는?",
    "option1": "commands",
    "option2": "scripts",
    "option3": "run",
    "option4": "exec",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "NPM과 모듈 시스템",
    "chapterNum": 3
  },
  {
    "question": "Node.js는 어떤 모델을 기반으로 작동하는가?",
    "option1": "멀티스레드",
    "option2": "싱글스레드 이벤트 루프",
    "option3": "프리엠티브",
    "option4": "블로킹 모델",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "비동기 처리를 위한 기본 함수는?",
    "option1": "for()",
    "option2": "require()",
    "option3": "setTimeout()",
    "option4": "fetch()",
    "answerIndex": 3,
    "difficulty": "하",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "콜백 함수란?",
    "option1": "에러를 리턴하는 함수",
    "option2": "다른 함수에 전달되어 실행되는 함수",
    "option3": "메서드 체이닝 함수",
    "option4": "이벤트 바인딩 함수",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "이벤트 루프의 역할은?",
    "option1": "동기 코드 실행",
    "option2": "비동기 콜백 실행",
    "option3": "모듈 캐싱",
    "option4": "네임스페이스 생성",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "Promise에서 성공 시 호출되는 메서드는?",
    "option1": "catch()",
    "option2": "then()",
    "option3": "resolve()",
    "option4": "finally()",
    "answerIndex": 2,
    "difficulty": "중",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "Promise를 async/await 문법으로 바꿨을 때 await는 어떤 역할을 하는가?",
    "option1": "즉시 실행",
    "option2": "지연 실행",
    "option3": "블로킹 대기",
    "option4": "비동기 완료까지 대기",
    "answerIndex": 4,
    "difficulty": "중",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "이벤트를 등록하는 Node.js 메서드는?",
    "option1": "addListener()",
    "option2": "on()",
    "option3": "once()",
    "option4": "모두 해당",
    "answerIndex": 4,
    "difficulty": "상",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "이벤트 루프에서 작업 큐는 무엇을 저장하는가?",
    "option1": "실행 중 함수",
    "option2": "예약된 콜백",
    "option3": "블로킹 코드",
    "option4": "모듈 캐시",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "콜백 지옥의 주요 단점은?",
    "option1": "성능 저하",
    "option2": "비동기 불가",
    "option3": "가독성 저하 및 에러 처리 어려움",
    "option4": "변수 충돌",
    "answerIndex": 3,
    "difficulty": "상",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "이벤트 기반 처리를 위해 사용하는 기본 모듈은?",
    "option1": "event",
    "option2": "events",
    "option3": "stream",
    "option4": "process",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "비동기 처리와 이벤트 루프",
    "chapterNum": 4
  },
  {
    "question": "Node.js에서 MongoDB와 연결하기 위한 대표적인 라이브러리는?",
    "option1": "mongoose",
    "option2": "sequelize",
    "option3": "pg",
    "option4": "sqlite",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  },
  {
    "question": "SQL 기반의 데이터베이스 연결에 사용하는 라이브러리는?",
    "option1": "mongoose",
    "option2": "pg",
    "option3": "mongo",
    "option4": "redis",
    "answerIndex": 2,
    "difficulty": "하",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  },
  {
    "question": "MongoDB에서 컬렉션은 어떤 개념과 유사한가?",
    "option1": "테이블",
    "option2": "열",
    "option3": "행",
    "option4": "스키마",
    "answerIndex": 1,
    "difficulty": "하",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  },
  {
    "question": "Mongoose에서 모델을 정의할 때 사용하는 함수는?",
    "option1": "createModel()",
    "option2": "define()",
    "option3": "model()",
    "option4": "schema()",
    "answerIndex": 3,
    "difficulty": "중",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  },
  {
    "question": "MySQL을 Node.js에서 사용할 수 있도록 도와주는 패키지는?",
    "option1": "mysql2",
    "option2": "mysql-js",
    "option3": "mysql-node",
    "option4": "sql-node",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  },
  {
    "question": "mongoose.Schema는 어떤 역할을 하는가?",
    "option1": "데이터 검증",
    "option2": "라우팅",
    "option3": "비동기 처리",
    "option4": "이벤트 바인딩",
    "answerIndex": 1,
    "difficulty": "중",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  },
  {
    "question": "MongoDB에서 데이터를 저장하는 단위는?",
    "option1": "Document",
    "option2": "Table",
    "option3": "Row",
    "option4": "Field",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  },
  {
    "question": "sequelize는 어떤 ORM을 위한 라이브러리인가?",
    "option1": "NoSQL",
    "option2": "SQL",
    "option3": "JSON",
    "option4": "REST",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  },
  {
    "question": "mongoose의 find() 함수는 어떤 결과를 반환하는가?",
    "option1": "하나의 객체",
    "option2": "배열",
    "option3": "문자열",
    "option4": "정수",
    "answerIndex": 2,
    "difficulty": "상",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  },
  {
    "question": "MongoDB 연결 시 접속 문자열의 기본 포트는?",
    "option1": "27017",
    "option2": "3306",
    "option3": "5432",
    "option4": "8080",
    "answerIndex": 1,
    "difficulty": "상",
    "chapterName": "Node.js와 데이터베이스",
    "chapterNum": 5
  }
]